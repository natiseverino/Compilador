//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
package compilador;
//#line 19 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
public static ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short IGUAL=257;
public final static short MAYOR_IGUAL=258;
public final static short MENOR_IGUAL=259;
public final static short DISTINTO=260;
public final static short IF=261;
public final static short THEN=262;
public final static short ELSE=263;
public final static short FOR=264;
public final static short END_IF=265;
public final static short OUT=266;
public final static short FUNC=267;
public final static short RETURN=268;
public final static short LONGINT=269;
public final static short FLOAT=270;
public final static short ID=271;
public final static short CTE=272;
public final static short CADENA_MULT=273;
public final static short PROC=274;
public final static short VAR=275;
public final static short NI=276;
public final static short UP=277;
public final static short DOWN=278;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    2,    2,    4,    4,    1,    1,    5,    5,    6,
    6,    3,    3,    3,    3,    3,    7,    7,    7,   15,
   15,   15,   14,   14,    8,    8,    8,    8,    8,    8,
    8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
    8,    8,    8,    8,    8,    8,    8,    8,    8,   16,
   16,   16,   16,   16,   16,   16,   16,   17,   17,   17,
   17,    9,    9,    9,    9,    9,    9,    9,    9,    9,
    9,    9,    9,    9,    9,    9,    9,    9,   18,   18,
   18,   18,   18,   19,   20,   10,   10,   10,   10,   10,
   10,   10,   10,   10,   10,   10,   10,   10,   10,   23,
   23,   22,   22,   11,   11,   11,   11,   11,   11,   11,
   11,   11,   12,   12,   12,   12,   12,   13,   13,   13,
   13,   13,   13,   13,   13,   13,   13,   13,   26,   26,
   26,   26,   26,   26,   26,   26,   26,   21,   21,   21,
   21,   27,   27,   27,   27,   27,   27,   25,   25,   25,
   25,   25,   25,   25,   28,   28,   28,   28,   28,   28,
   28,   24,   24,   29,   29,
};
final static short yylen[] = {                            2,
    1,    2,    1,    4,    1,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
    1,    2,    1,    1,   11,   10,   10,    9,   10,    9,
   11,   10,   11,   10,   11,   10,   10,   11,   10,   11,
   10,   11,   10,   10,    9,   10,    9,    7,    8,    5,
    3,    1,    4,    4,    2,    7,    3,    2,    3,    2,
    3,    6,    8,    5,    7,    7,    5,    7,    6,    8,
    5,    6,    7,    8,    8,    7,    8,    7,    3,    2,
    2,    2,    1,    1,    1,   12,   11,   12,   12,   12,
   12,   12,   12,   11,   12,   12,   12,   12,    9,    4,
    1,    1,    1,    5,    5,    4,    5,    4,    5,    5,
    4,    5,    4,    4,    4,    4,    3,    5,    4,    4,
    3,    4,    3,    5,    4,    3,    4,    3,    5,    3,
    1,    7,    3,    3,    4,    4,    2,    3,    2,    3,
    3,    1,    1,    1,    1,    1,    1,    3,    3,    1,
    3,    3,    3,    3,    3,    3,    1,    3,    3,    3,
    3,    1,    1,    1,    2,
};
final static short yydefred[] = {                         0,
    0,    0,    0,    0,   23,   24,    0,    0,    0,    0,
    0,    8,    7,    9,   10,   11,   12,   13,   14,   15,
   16,    0,    0,    0,    0,    0,  162,  164,    0,    0,
    0,    0,  157,    0,    0,  163,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    6,    0,    0,    0,    0,    0,    0,
  146,  142,  143,  147,    0,  144,  145,    0,    0,    0,
    0,    0,    0,   84,    5,    0,    0,   82,    0,  165,
    0,    0,   80,  139,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  126,    0,    0,    0,    0,    0,  123,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  121,    0,   19,    0,   22,   18,   17,    0,  114,
    0,    0,    0,    0,  160,  161,    0,    0,    0,   79,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  158,  155,  159,  156,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  108,    0,  115,  134,    0,
  133,    0,   60,    0,    0,    0,    0,  119,   58,    0,
    0,    0,  125,    0,  116,  113,  122,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  106,  120,   20,
  105,    0,    0,   85,    0,    0,    0,    0,   67,    0,
    0,    0,    0,    0,   64,    0,    0,    0,    0,    0,
    0,  107,  109,  110,  104,  112,  136,  135,    0,  124,
   61,   59,    0,    0,    0,    0,    0,  118,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    4,    0,    0,   69,    0,   72,    0,
    0,    0,   62,    0,    0,    0,    0,    0,    0,    0,
    0,  102,  103,    0,    0,    0,    0,    0,   54,   53,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   78,    0,
   68,    0,   73,    0,    0,   66,   65,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   48,    0,    0,    0,    0,    0,    0,    0,   77,   70,
   74,   75,   63,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  132,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   49,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  101,   99,   28,
    0,   56,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   47,    0,   45,    0,    0,    0,    0,    0,    0,
   30,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    3,   27,   32,    0,   34,
    0,   37,    0,   39,   41,   43,   26,   36,    0,    0,
    0,   46,    0,   44,   29,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   94,    0,    0,    0,
   31,   33,   35,   38,   40,   42,   25,   87,   88,   89,
   90,   91,   92,   93,   95,   96,   97,   98,   86,  100,
};
final static short yydgoto[] = {                         10,
   11,  425,   12,  204,   13,   14,   15,   16,   17,   18,
   19,   20,   21,   22,   57,  107,  108,   31,   76,  205,
   32,  274,  389,   33,   34,   46,   72,   35,   36,
};
final static short yysindex[] = {                      1146,
   56,  189,   35,   36,    0,    0,   26,  -36,   -9,    0,
 1146,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -212, -237,  139, 1415,  105,    0,    0,  106, -230,
   50,    8,    0, 1433,  117,    0, -216,  -46, -179,  595,
  139,  -41,   85,   60,  268,   67,  115,   49,   75,    4,
  130,  124,  152,    0,  138,   12,  -42,  160,  448,  122,
    0,    0,    0,    0,  105,    0,    0,  600,  600,   28,
   28,  139, 1146,    0,    0,  -55, 1427,    0,  174,    0,
  670,  -91,    0,    0,  618,  626,  710,  720,  757,  163,
  257,  -43,  814,  281,  301,  -30,  300,  324,  144,   14,
 -156,  -20,  -64,    0,  -54,  110,  344,  263,    2,    0,
  143,  153,  334,   77,  127,  238,  129,  141,  350,  147,
  356,    0,  362,    0,  154,    0,    0,    0,  391,    0,
  183,  157,  117,  117,    0,    0,  166, 1146,  105,    0,
   63,  105,  394,  693,  105,  400,  157,  117,  157,  117,
  448,  166,    0,    0,    0,    0,  190,  211,  214, -150,
  420,  429,  433,  437,  438,    0,  443,    0,    0,  233,
    0,   16,    0,  446,  235,  240,  453,    0,    0,  239,
 -121,  465,    0,  457,    0,    0,    0,  250,  487,  253,
  489,  -35,  -96,  -33,  470,  258,  476,    0,    0,    0,
    0,  105,  411,    0,  278,  105,  488,  283,    0,   32,
  729,  492,  291,  292,    0,  503,  517,  525,  528,  -25,
  197,    0,    0,    0,    0,    0,    0,    0,  275,    0,
    0,    0,  319,  519,  129,  456, -100,    0,  534,  321,
  538,  328,  539,  336,  -38,  -39, 1146,  552, -219,  338,
  553,  814,  351,    0,  558,  353,    0,  560,    0,   44,
  572, -142,    0,  573,  578,  814,  814,  814,  814,  814,
  824,    0,    0,  375,  605,  536,  388, -100,    0,    0,
  390,  603,  393,  606,  396,  608, 1146,  405,  409, -147,
  332,  410,  625,   78,  543,  415,  630,  633,    0,  634,
    0,  635,    0,  636,  638,    0,    0,  640,  643,  644,
  646,  648, 1421,   62,  667,  474, 1146,  590,  690,  631,
  485,  647,  486,  649,  491,  756,  651,  652,  653,  784,
    0,  655,  494,  495, -110, 1146,  656,  197,    0,    0,
    0,    0,    0,  197,  197,  197,  197,  197,  197, -225,
  499, 1065,    0,  807, 1146,  505, 1146,  658, 1146,  660,
 1146,  665,    0, 1146, 1146, 1146,  818,  847, 1146,  666,
  671,  674,  795,  859, 1146,  526,  527,  529,  531,  532,
  545,  550,  556, -106,  759,  102,  142,    0,    0,    0,
  882,    0,  898, 1146,  910, 1146,  921, 1146,  937,  965,
  976,    0,  997,    0, 1009, 1146, 1146, 1146, 1020, 1032,
    0, 1053,  780,  788,  789,  792,  793,  796,  801,  802,
  809,   54, 1065,  -29,  142,    0,    0,    0, 1064,    0,
 1084,    0, 1095,    0,    0,    0,    0,    0, 1118, 1130,
 1157,    0, 1174,    0,    0, 1065, 1065, 1065, 1065, 1065,
 1065, 1065, 1065, 1065, 1065, 1107,    0,  812,  766,  723,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  854,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  414,    0,    0,  178,    0,    0,    0,    0,    0,
    0,   10,    0,    0,    0,    0,    0,    0,    0,  816,
    0,    0,    0,    0,    0,   61,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  740,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   27,
    0,    0,    0,    0,    7,    0,    0,  -32,    0,    0,
    0,  289,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  207,  308,    0,    0,  614,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  364,  458,  482,  549,
  650,  709,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  387,    0,    0,    0,    0,    0,
    0,   42,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -31,    0,  521,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1185,    0,    0,    0,    0,    0,    0,    0,
    0,  575,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -27,  -16,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  120,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  639,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -15,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    7,  440,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
  -71,    0, 1080,   48,  -11,  399,    0,    0,    0,    0,
    0,    0,    0,   -4,  -37,   22,  -84,    0,   -3, -104,
  -13, 1168, 1096,   -7,    5,   -8,  826,   72,    0,
};
final static int YYTABLESIZE=1693;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         54,
   53,  138,  101,   49,  178,  244,  128,  249,   52,   55,
  165,  459,   93,   57,   75,   79,  128,  160,  126,   75,
  174,  290,  288,  182,   51,   50,  247,   82,   60,  104,
  383,   52,   98,  271,  109,   58,  293,  208,  106,  213,
  214,   80,  184,   55,  106,   99,  128,  101,   83,  112,
  131,  272,  273,   75,   90,  125,  294,  170,   56,  229,
  183,  131,  135,  136,  120,   43,   44,  137,  131,   75,
  119,   23,   30,   74,   38,   40,  137,  144,   74,  161,
  154,  156,  130,   23,  287,  137,   45,  200,  116,    9,
  259,  152,   24,   94,  456,   23,  236,  253,  176,  171,
  130,  256,   23,  106,   24,  219,  262,  113,  329,  106,
  106,  106,   74,  304,  172,  118,   24,  188,  110,   21,
  350,  220,  305,   24,  330,  105,  203,   75,   74,  128,
   75,  128,   75,   75,  235,  189,  191,  194,  335,  133,
  134,  424,   44,  104,    9,  372,   78,    5,    6,  421,
   30,  279,  280,  103,  114,  117,  148,  150,   88,  245,
  129,  373,   45,   89,   85,  422,   86,  190,    5,    6,
  121,  145,   73,  146,  103,  291,  106,  150,  129,  246,
  130,    9,  122,   30,   70,   68,   85,   69,   86,   71,
   75,  175,  123,  319,   75,   85,  124,   86,   70,   75,
  129,  185,  168,   71,    5,    6,  153,  139,   85,   91,
   86,  186,  159,  127,  140,  326,  289,  150,  150,   47,
  150,  177,  150,  157,   92,  164,  458,   73,   29,  100,
  270,  106,  106,   30,   48,  173,  150,  150,  297,  150,
  243,   42,  248,   52,   55,  354,  153,  153,   57,  153,
  173,  153,  308,  309,  310,  311,  312,  314,  368,   51,
   50,   50,  128,   51,  374,  153,  153,  128,  153,  128,
  128,  128,  128,  106,  100,  128,  128,  128,  193,   54,
  128,   41,   56,  391,  169,  393,  228,  395,  117,  397,
   37,   39,  399,  400,  401,  403,   42,  405,   27,   28,
  150,  410,  150,  412,  115,    1,  181,  154,  302,  455,
    2,   81,   30,    3,   54,    4,   21,  158,    5,    6,
    7,  162,  429,    8,  431,  206,  433,  207,  117,  153,
  117,  153,  117,  334,  439,  440,  441,  443,  272,  273,
  102,  163,   54,    5,    6,    5,    6,  154,  154,  103,
  154,  103,  154,    5,    6,   42,   54,   41,  166,  103,
    1,   77,   54,  151,  167,    2,  154,  154,    3,  154,
    4,    9,   42,    5,    6,    7,   27,   28,    8,   54,
  179,   54,  117,   54,  180,   54,  111,   54,   54,   54,
  196,   54,  187,   54,   59,    5,    6,    1,   54,  173,
   54,  103,    2,  151,  151,    3,  151,    4,  151,   27,
   28,  117,  386,  117,  198,  109,  195,   54,  197,   54,
  199,   54,  151,  151,   56,  151,  111,   54,   54,   54,
  154,   54,  154,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,   25,  202,  150,  150,  150,  201,
   26,  150,  209,   83,  150,  150,  331,  148,  215,   27,
   28,  216,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  272,  273,  153,  153,  153,  221,    2,
  153,  152,  217,  153,  153,  218,  151,  222,  151,   70,
   68,  223,   69,  192,   71,  224,  225,  148,  148,  278,
  148,  226,  148,  227,  230,  231,    5,    6,  237,  111,
  232,  111,  103,  233,  234,  238,  148,  148,  117,  148,
  127,  152,  152,  111,  152,  239,  152,  240,  241,  242,
  250,    5,    6,  251,  252,  254,   83,  103,   27,   28,
  152,  152,  255,  152,  117,  275,  257,  258,  149,  117,
  263,  117,  117,  117,  117,  264,  265,  117,  117,  117,
  127,  266,  117,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,   71,  267,  154,  154,  154,  277,
  148,  154,  148,  268,  154,  154,  269,    1,  149,  149,
  276,  149,    2,  149,  281,    3,  282,    4,  283,  285,
    5,    6,    7,  284,  152,    8,  152,  149,  149,  295,
  149,  286,  292,  296,   71,  298,  299,  300,  301,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  303,  306,  151,  151,  151,   97,  307,  151,   76,   30,
  151,  151,  111,  127,   30,  127,  315,  111,  316,  111,
  111,  111,  111,  141,  141,  111,  111,  111,  317,  318,
  111,  320,   30,  321,  322,  336,  323,  324,  325,   83,
   30,  149,  141,  149,   83,   83,  327,   83,   76,   83,
  328,  332,   83,   83,   83,  333,  337,   83,  338,  140,
  140,  339,  340,  341,  342,    2,  343,   71,  344,   71,
    2,  345,  346,    2,  347,    2,  348,  352,  140,    9,
    2,  117,  355,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,    5,    6,  148,  148,  148,  353,
  103,  148,    9,  356,  148,  148,  141,  152,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  138,  138,
  152,  152,  152,  357,   30,  152,  358,  360,  152,  152,
  392,   76,  362,   76,   30,  370,  371,  138,    9,  359,
  385,  361,  140,  364,  365,  366,  127,  369,  375,   81,
  394,  127,  396,  127,  127,  127,  127,  398,  406,  127,
  127,  127,   73,  407,  127,    9,  408,  413,  414,  423,
  415,   30,  416,  417,  149,  149,  149,  149,  149,  149,
  149,  149,  149,  149,  149,   73,  418,  149,  149,  149,
  446,  419,  149,    9,  178,  149,  149,  420,  447,  448,
   71,  138,  449,  450,    9,   71,  451,   71,   71,   71,
   71,  452,  453,   71,   71,   71,    9,  480,   71,  454,
   95,   73,  174,    1,  478,  132,  131,    9,   30,   87,
    0,    0,   81,    0,    0,   27,   28,   96,   30,  141,
   27,   28,    0,  147,  141,  141,    0,  141,    0,  141,
  363,  149,  141,  141,  141,    0,    9,  141,   27,   28,
  141,  141,    0,    0,   76,    0,   27,   28,    9,   76,
    0,   76,   76,   76,   76,  140,  367,   76,   76,   76,
  140,  140,   76,  140,    0,  140,    0,  409,  140,  140,
  140,    9,    0,  140,    0,  141,  140,  140,    0,    0,
    2,  390,  142,    3,  143,    4,    0,    9,    5,    6,
    7,    0,  402,    8,    0,    0,    0,    0,  210,    9,
    0,    0,    0,    2,    0,  211,    3,  212,    4,    0,
    9,    5,    6,    7,  138,  151,    8,    0,    0,  138,
  138,  404,  138,    0,  138,  153,    9,  138,  138,  138,
   27,   28,  138,  411,  260,  138,  138,    0,    0,    2,
   27,   28,    3,  261,    4,   81,    0,    5,    6,    7,
   81,   81,    8,   81,    9,   81,  427,    0,   81,   81,
   81,    1,  155,   81,    0,    9,    2,    0,    0,    3,
    0,    4,  428,    0,    5,    6,    7,   27,   28,    8,
    0,    0,    0,    0,  430,    0,    9,    0,    0,    1,
    0,    0,    0,    0,    2,  432,    0,    3,    9,    4,
    1,    0,    5,    6,    7,    2,    0,    8,    3,    9,
    4,  434,    1,    5,    6,    7,    0,    2,    8,   77,
    3,    9,    4,    1,    0,    5,    6,    7,    2,  313,
    8,    3,    0,    4,   27,   28,    5,    6,    7,  435,
    0,    8,    9,    0,   27,   28,    0,    0,    0,    0,
  436,    0,    1,    9,    9,    0,    0,    2,    0,    0,
    3,    0,    4,    0,    1,    5,    6,    7,    0,    2,
    8,  437,    3,    9,    4,    0,    0,    5,    6,    7,
    0,    0,    8,  438,    9,    0,    0,    1,    0,    0,
    0,    0,    2,    0,  442,    3,    9,    4,    0,    0,
    5,    6,    7,    1,    0,    8,  444,    9,    2,    0,
    0,    3,    0,    4,    0,    1,    5,    6,    7,    9,
    2,    8,    0,    3,    0,    4,    1,  445,    5,    6,
    7,    2,    0,    8,    3,    9,    4,  387,  461,    5,
    6,    7,    1,    0,    8,    0,    9,    2,    0,    0,
    3,    0,    4,    0,    0,    5,    6,    7,  462,    0,
    8,    0,    0,    9,    0,    0,    0,    0,    0,  463,
    1,    0,    0,    0,    6,    2,    0,    0,    3,  387,
    4,    1,    0,    5,    6,    7,    2,    0,    8,    3,
    0,    4,  464,    0,    5,    6,    7,    0,    0,    8,
    0,    0,    1,    0,  465,    0,    0,    2,    0,    0,
    3,    0,    4,    0,    1,    5,    6,    7,    0,    2,
    8,    0,    3,    0,    4,    1,    0,    5,    6,    7,
    2,  466,    8,    3,    0,    4,    0,    1,    5,    6,
    7,    0,    2,    8,    0,    3,    0,    4,  467,    0,
    5,    6,    7,    0,    0,    8,    0,    0,    1,    0,
    0,    0,    0,    2,    0,    0,    3,    0,    4,    1,
    1,    5,    6,    7,    2,    2,    8,    3,    3,    4,
    4,    0,    5,    6,    7,  386,    0,    8,    0,    1,
    0,    0,    0,    0,    2,    0,    0,    3,    0,    4,
    1,    0,    5,    6,    7,    2,    0,    8,    3,    0,
    4,    0,    1,    5,    6,    7,    0,    2,    8,    0,
    3,    0,    4,    1,    0,    5,    6,    7,    2,    0,
    8,    3,    0,    4,    0,    1,    5,    6,    7,    0,
    2,    8,    0,    3,    0,    4,    0,    0,    5,    6,
    7,    1,    0,    8,    0,    0,    2,    0,    0,    3,
    0,    4,    1,    0,    5,    6,    7,    2,    0,    8,
    3,    0,    4,    0,    0,    5,    6,    7,    0,    1,
    8,  388,    0,    0,    2,    0,    0,    3,    0,    4,
    6,    0,    5,    6,    7,    6,    0,    8,    6,    0,
    6,    0,    0,    6,    6,    6,   70,   68,    6,   69,
    0,   71,   70,   68,    0,   69,  426,   71,   70,   68,
    0,   69,    0,   71,   67,   85,   66,   86,    0,  349,
   67,  351,   66,    0,    0,    0,   67,    0,   66,    0,
    0,    0,   67,    0,   66,    0,    0,    0,    0,    0,
    0,    0,  388,    0,  460,  376,    0,    0,    0,    0,
    0,  377,  378,  379,  380,  381,  382,  384,  457,    0,
    0,    0,    0,    0,    0,  388,  388,  388,  388,  388,
  388,  388,  388,  388,  388,  388,    0,    0,    0,    0,
    0,  468,  469,  470,  471,  472,  473,  474,  475,  476,
  477,  479,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   61,   62,   63,   64,    0,   65,   61,   62,   63,
   64,    0,    0,   61,   62,   63,   64,    0,   84,   61,
   62,   63,   64,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         11,
    9,   73,   44,   40,   59,   41,    0,   41,   41,   41,
   41,   41,   59,   41,   26,   29,   59,   61,   56,   31,
   41,   61,   61,  108,   41,   41,  123,   31,   24,   59,
  256,   41,   40,   59,   43,  273,  256,  142,   43,  144,
  145,  272,   41,  256,   49,   41,   40,   44,   41,   45,
   41,  277,  278,   65,  271,   44,  276,   44,  271,   44,
   59,   65,   70,   71,   61,   40,   41,   41,   59,   81,
   49,   40,   45,   26,   40,   40,   72,   81,   31,   93,
   88,   89,   41,   40,  123,   59,   61,  125,   40,   40,
   59,   87,   61,  273,   41,   40,  181,  202,  103,  256,
   59,  206,   40,  108,   61,  256,  211,   41,  256,  114,
  115,  116,   65,  256,  271,   41,   61,   41,   59,   59,
   59,  272,  265,   61,  272,   41,  138,  139,   81,  123,
  142,  125,  144,  145,  256,  114,  115,  116,   61,   68,
   69,   40,   41,   59,   40,  256,   41,  269,  270,  256,
   45,  236,  237,  275,   40,  256,   85,   86,   42,  256,
   41,  272,   61,   47,   43,  272,   45,   41,  269,  270,
   41,  263,  123,  265,  275,  247,  181,    0,   59,  276,
   59,   40,   59,   45,   42,   43,   43,   45,   45,   47,
  202,  256,   41,  278,  206,   43,   59,   45,   42,  211,
   41,   59,   59,   47,  269,  270,    0,  263,   43,  256,
   45,   59,  256,  256,   41,  287,  256,   40,   41,  256,
   43,  276,   45,   61,  271,  256,  256,  123,   40,  271,
  256,  236,  237,   45,  271,  271,   59,   60,  252,   62,
  276,  271,  276,  276,  276,  317,   40,   41,  276,   43,
  271,   45,  266,  267,  268,  269,  270,  271,  330,  276,
  276,  271,  256,  273,  336,   59,   60,  261,   62,  263,
  264,  265,  266,  278,  271,  269,  270,  271,   41,  291,
  274,  256,  271,  355,  271,  357,  271,  359,    0,  361,
  256,  256,  364,  365,  366,  367,  271,  369,  271,  272,
  123,  373,  125,  375,  256,  256,   44,    0,  265,  256,
  261,  262,   45,  264,  326,  266,  256,   61,  269,  270,
  271,   41,  394,  274,  396,  263,  398,  265,   40,  123,
  256,  125,  256,  256,  406,  407,  408,  409,  277,  278,
  256,   41,  354,  269,  270,  269,  270,   40,   41,  275,
   43,  275,   45,  269,  270,  271,  368,  256,   59,  275,
  256,  256,  374,    0,   41,  261,   59,   60,  264,   62,
  266,   40,  271,  269,  270,  271,  271,  272,  274,  391,
  271,  393,  256,  395,   41,  397,    0,  399,  400,  401,
   41,  403,   59,  405,  256,  269,  270,  256,  410,  271,
  412,  275,  261,   40,   41,  264,   43,  266,   45,  271,
  272,  123,  271,  125,   59,  424,  276,  429,  272,  431,
   59,  433,   59,   60,  271,   62,   40,  439,  440,  441,
  123,  443,  125,  256,  257,  258,  259,  260,  261,  262,
  263,  264,  265,  266,  256,  263,  269,  270,  271,   59,
  262,  274,   59,   40,  277,  278,  125,    0,   59,  271,
  272,  272,  256,  257,  258,  259,  260,  261,  262,  263,
  264,  265,  266,  277,  278,  269,  270,  271,   59,   40,
  274,    0,  272,  277,  278,  272,  123,   59,  125,   42,
   43,   59,   45,  256,   47,   59,   59,   40,   41,   44,
   43,   59,   45,  271,   59,  271,  269,  270,   44,  123,
  271,  125,  275,   61,  276,   59,   59,   60,  256,   62,
    0,   40,   41,  256,   43,  276,   45,   41,  276,   41,
   61,  269,  270,  276,   59,  125,  123,  275,  271,  272,
   59,   60,  265,   62,  256,  271,   59,  265,    0,  261,
   59,  263,  264,  265,  266,  265,  265,  269,  270,  271,
   40,   59,  274,  256,  257,  258,  259,  260,  261,  262,
  263,  264,  265,  266,    0,   59,  269,  270,  271,   61,
  123,  274,  125,   59,  277,  278,   59,  256,   40,   41,
  272,   43,  261,   45,   61,  264,  276,  266,   61,   61,
  269,  270,  271,  276,  123,  274,  125,   59,   60,  272,
   62,  276,   61,   61,   40,  265,   59,  265,   59,  256,
  257,  258,  259,  260,  261,  262,  263,  264,  265,  266,
   59,   59,  269,  270,  271,   41,   59,  274,    0,   45,
  277,  278,  256,  123,   45,  125,  272,  261,   44,  263,
  264,  265,  266,   40,   41,  269,  270,  271,  123,  272,
  274,  272,   45,   61,  272,  123,   61,  272,   61,  256,
   45,  123,   59,  125,  261,  262,  272,  264,   40,  266,
  272,  272,  269,  270,  271,   61,  272,  274,   59,   40,
   41,   59,   59,   59,   59,  256,   59,  123,   59,  125,
  261,   59,   59,  264,   59,  266,   59,   41,   59,   40,
  271,  256,  123,  256,  257,  258,  259,  260,  261,  262,
  263,  264,  265,  266,  269,  270,  269,  270,  271,  256,
  275,  274,   40,   44,  277,  278,  123,  256,  257,  258,
  259,  260,  261,  262,  263,  264,  265,  266,   40,   41,
  269,  270,  271,  123,   45,  274,  272,  272,  277,  278,
  256,  123,  272,  125,   45,  272,  272,   59,   40,  123,
  272,  123,  123,  123,  123,  123,  256,  123,  123,   40,
  123,  261,  123,  263,  264,  265,  266,  123,  123,  269,
  270,  271,  123,  123,  274,   40,  123,  272,  272,   41,
  272,   45,  272,  272,  256,  257,  258,  259,  260,  261,
  262,  263,  264,  265,  266,  123,  272,  269,  270,  271,
   41,  272,  274,   40,   59,  277,  278,  272,   41,   41,
  256,  123,   41,   41,   40,  261,   41,  263,  264,  265,
  266,   41,   41,  269,  270,  271,   40,  125,  274,   41,
  256,  123,   41,    0,  456,  256,   41,   40,   45,   34,
   -1,   -1,  123,   -1,   -1,  271,  272,  273,   45,  256,
  271,  272,   -1,  256,  261,  262,   -1,  264,   -1,  266,
  125,  256,  269,  270,  271,   -1,   40,  274,  271,  272,
  277,  278,   -1,   -1,  256,   -1,  271,  272,   40,  261,
   -1,  263,  264,  265,  266,  256,  123,  269,  270,  271,
  261,  262,  274,  264,   -1,  266,   -1,  123,  269,  270,
  271,   40,   -1,  274,   -1,  256,  277,  278,   -1,   -1,
  261,  125,  263,  264,  265,  266,   -1,   40,  269,  270,
  271,   -1,  125,  274,   -1,   -1,   -1,   -1,  256,   40,
   -1,   -1,   -1,  261,   -1,  263,  264,  265,  266,   -1,
   40,  269,  270,  271,  256,  256,  274,   -1,   -1,  261,
  262,  125,  264,   -1,  266,  256,   40,  269,  270,  271,
  271,  272,  274,  125,  256,  277,  278,   -1,   -1,  261,
  271,  272,  264,  265,  266,  256,   -1,  269,  270,  271,
  261,  262,  274,  264,   40,  266,  125,   -1,  269,  270,
  271,  256,  256,  274,   -1,   40,  261,   -1,   -1,  264,
   -1,  266,  125,   -1,  269,  270,  271,  271,  272,  274,
   -1,   -1,   -1,   -1,  125,   -1,   40,   -1,   -1,  256,
   -1,   -1,   -1,   -1,  261,  125,   -1,  264,   40,  266,
  256,   -1,  269,  270,  271,  261,   -1,  274,  264,   40,
  266,  125,  256,  269,  270,  271,   -1,  261,  274,  256,
  264,   40,  266,  256,   -1,  269,  270,  271,  261,  256,
  274,  264,   -1,  266,  271,  272,  269,  270,  271,  125,
   -1,  274,   40,   -1,  271,  272,   -1,   -1,   -1,   -1,
  125,   -1,  256,   40,   40,   -1,   -1,  261,   -1,   -1,
  264,   -1,  266,   -1,  256,  269,  270,  271,   -1,  261,
  274,  125,  264,   40,  266,   -1,   -1,  269,  270,  271,
   -1,   -1,  274,  125,   40,   -1,   -1,  256,   -1,   -1,
   -1,   -1,  261,   -1,  125,  264,   40,  266,   -1,   -1,
  269,  270,  271,  256,   -1,  274,  125,   40,  261,   -1,
   -1,  264,   -1,  266,   -1,  256,  269,  270,  271,   40,
  261,  274,   -1,  264,   -1,  266,  256,  125,  269,  270,
  271,  261,   -1,  274,  264,   40,  266,  123,  125,  269,
  270,  271,  256,   -1,  274,   -1,   40,  261,   -1,   -1,
  264,   -1,  266,   -1,   -1,  269,  270,  271,  125,   -1,
  274,   -1,   -1,   40,   -1,   -1,   -1,   -1,   -1,  125,
  256,   -1,   -1,   -1,   40,  261,   -1,   -1,  264,  123,
  266,  256,   -1,  269,  270,  271,  261,   -1,  274,  264,
   -1,  266,  125,   -1,  269,  270,  271,   -1,   -1,  274,
   -1,   -1,  256,   -1,  125,   -1,   -1,  261,   -1,   -1,
  264,   -1,  266,   -1,  256,  269,  270,  271,   -1,  261,
  274,   -1,  264,   -1,  266,  256,   -1,  269,  270,  271,
  261,  125,  274,  264,   -1,  266,   -1,  256,  269,  270,
  271,   -1,  261,  274,   -1,  264,   -1,  266,  125,   -1,
  269,  270,  271,   -1,   -1,  274,   -1,   -1,  256,   -1,
   -1,   -1,   -1,  261,   -1,   -1,  264,   -1,  266,  256,
  256,  269,  270,  271,  261,  261,  274,  264,  264,  266,
  266,   -1,  269,  270,  271,  271,   -1,  274,   -1,  256,
   -1,   -1,   -1,   -1,  261,   -1,   -1,  264,   -1,  266,
  256,   -1,  269,  270,  271,  261,   -1,  274,  264,   -1,
  266,   -1,  256,  269,  270,  271,   -1,  261,  274,   -1,
  264,   -1,  266,  256,   -1,  269,  270,  271,  261,   -1,
  274,  264,   -1,  266,   -1,  256,  269,  270,  271,   -1,
  261,  274,   -1,  264,   -1,  266,   -1,   -1,  269,  270,
  271,  256,   -1,  274,   -1,   -1,  261,   -1,   -1,  264,
   -1,  266,  256,   -1,  269,  270,  271,  261,   -1,  274,
  264,   -1,  266,   -1,   -1,  269,  270,  271,   -1,  256,
  274,  352,   -1,   -1,  261,   -1,   -1,  264,   -1,  266,
  256,   -1,  269,  270,  271,  261,   -1,  274,  264,   -1,
  266,   -1,   -1,  269,  270,  271,   42,   43,  274,   45,
   -1,   47,   42,   43,   -1,   45,  387,   47,   42,   43,
   -1,   45,   -1,   47,   60,   43,   62,   45,   -1,   59,
   60,  314,   62,   -1,   -1,   -1,   60,   -1,   62,   -1,
   -1,   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  423,   -1,  425,  338,   -1,   -1,   -1,   -1,
   -1,  344,  345,  346,  347,  348,  349,  350,  423,   -1,
   -1,   -1,   -1,   -1,   -1,  446,  447,  448,  449,  450,
  451,  452,  453,  454,  455,  456,   -1,   -1,   -1,   -1,
   -1,  446,  447,  448,  449,  450,  451,  452,  453,  454,
  455,  456,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,  258,  259,  260,   -1,  262,  257,  258,  259,
  260,   -1,   -1,  257,  258,  259,  260,   -1,  256,  257,
  258,  259,  260,
};
}
final static short YYFINAL=10;
final static short YYMAXTOKEN=278;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,null,"';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"IGUAL","MAYOR_IGUAL","MENOR_IGUAL",
"DISTINTO","IF","THEN","ELSE","FOR","END_IF","OUT","FUNC","RETURN","LONGINT",
"FLOAT","ID","CTE","CADENA_MULT","PROC","VAR","NI","UP","DOWN",
};
final static String yyrule[] = {
"$accept : programa",
"programa : lista_sentencias",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable",
"bloque_ejecutable : sentencia_ejecutable",
"bloque_sentencias : '{' lista_sentencias sentencia '}'",
"bloque_sentencias : sentencia",
"lista_sentencias : lista_sentencias sentencia",
"lista_sentencias : sentencia",
"sentencia : sentencia_ejecutable",
"sentencia : sentencia_declarativa",
"sentencia_declarativa : declaracion_variables",
"sentencia_declarativa : declaracion_procedimiento",
"sentencia_ejecutable : sentencia_seleccion",
"sentencia_ejecutable : sentencia_control",
"sentencia_ejecutable : sentencia_salida",
"sentencia_ejecutable : sentencia_asignacion",
"sentencia_ejecutable : sentencia_invocacion",
"declaracion_variables : tipo lista_variables ';'",
"declaracion_variables : tipo lista_variables error",
"declaracion_variables : tipo error ';'",
"lista_variables : ID ',' lista_variables",
"lista_variables : ID",
"lista_variables : ID lista_variables",
"tipo : LONGINT",
"tipo : FLOAT",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales ')' NI '=' CTE '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' ')' NI '=' CTE '{' lista_sentencias '}'",
"declaracion_procedimiento : ID '(' lista_parametros_formales ')' NI '=' CTE '{' lista_sentencias '}'",
"declaracion_procedimiento : ID '(' ')' NI '=' CTE '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC '(' lista_parametros_formales ')' NI '=' CTE '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC '(' ')' NI '=' CTE '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC error '(' lista_parametros_formales ')' NI '=' CTE '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC error '(' ')' NI '=' CTE '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID error lista_parametros_formales ')' NI '=' CTE '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID error ')' NI '=' CTE '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' error ')' NI '=' CTE '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales NI '=' CTE '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' error NI '=' CTE '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales ')' error '=' CTE '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' ')' error '=' CTE '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales ')' NI error CTE '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' ')' NI error CTE '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales ')' NI '=' error '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' ')' NI '=' error '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales ')' NI '=' CTE lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' ')' NI '=' CTE lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales ')' NI '=' CTE '{' '}'",
"declaracion_procedimiento : PROC ID '(' ')' NI '=' CTE '{' '}'",
"declaracion_procedimiento : PROC ID '(' ')' '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' ')' error '{' lista_sentencias '}'",
"lista_parametros_formales : parametro_formal ',' parametro_formal ',' parametro_formal",
"lista_parametros_formales : parametro_formal ',' parametro_formal",
"lista_parametros_formales : parametro_formal",
"lista_parametros_formales : parametro_formal parametro_formal ',' parametro_formal",
"lista_parametros_formales : parametro_formal ',' parametro_formal parametro_formal",
"lista_parametros_formales : parametro_formal parametro_formal",
"lista_parametros_formales : parametro_formal ',' parametro_formal ',' parametro_formal ',' error",
"lista_parametros_formales : parametro_formal ',' error",
"parametro_formal : tipo ID",
"parametro_formal : VAR tipo ID",
"parametro_formal : error ID",
"parametro_formal : VAR error ID",
"sentencia_seleccion : IF condicion_if THEN bloque_then END_IF ';'",
"sentencia_seleccion : IF condicion_if THEN bloque_then ELSE bloque_else END_IF ';'",
"sentencia_seleccion : IF condicion_if bloque_then END_IF ';'",
"sentencia_seleccion : IF condicion_if bloque_then ELSE bloque_else END_IF ';'",
"sentencia_seleccion : IF condicion_if THEN bloque_then bloque_else END_IF ';'",
"sentencia_seleccion : IF condicion_if THEN END_IF ';'",
"sentencia_seleccion : IF condicion_if THEN ELSE bloque_else END_IF ';'",
"sentencia_seleccion : IF condicion_if THEN error END_IF ';'",
"sentencia_seleccion : IF condicion_if THEN error ELSE bloque_else END_IF ';'",
"sentencia_seleccion : IF condicion_if THEN bloque_then END_IF",
"sentencia_seleccion : IF condicion_if THEN bloque_then error ';'",
"sentencia_seleccion : IF condicion_if THEN bloque_then ELSE END_IF ';'",
"sentencia_seleccion : IF condicion_if THEN bloque_then ELSE error END_IF ';'",
"sentencia_seleccion : IF condicion_if THEN bloque_then ELSE bloque_else error ';'",
"sentencia_seleccion : IF condicion_if THEN bloque_then ELSE bloque_else END_IF",
"sentencia_seleccion : IF error THEN bloque_then ELSE bloque_else END_IF ';'",
"sentencia_seleccion : IF THEN bloque_then ELSE bloque_else END_IF ';'",
"condicion_if : '(' condicion ')'",
"condicion_if : condicion ')'",
"condicion_if : '(' condicion",
"condicion_if : '(' ')'",
"condicion_if : condicion",
"bloque_then : bloque_sentencias",
"bloque_else : bloque_sentencias",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' bloque_for",
"sentencia_control : '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' bloque_for",
"sentencia_control : FOR error ID '=' CTE ';' condicion ';' incr_decr CTE ')' bloque_for",
"sentencia_control : FOR '(' error '=' CTE ';' condicion ';' incr_decr CTE ')' bloque_for",
"sentencia_control : FOR '(' ID error CTE ';' condicion ';' incr_decr CTE ')' bloque_for",
"sentencia_control : FOR '(' ID '=' error ';' condicion ';' incr_decr CTE ')' bloque_for",
"sentencia_control : FOR '(' ID '=' CTE error condicion ';' incr_decr CTE ')' bloque_for",
"sentencia_control : FOR '(' ID '=' CTE ';' error ';' incr_decr CTE ')' bloque_for",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion incr_decr CTE ')' bloque_for",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' error CTE ')' bloque_for",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr error ')' bloque_for",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE error bloque_for",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' sentencia_declarativa",
"sentencia_control : FOR '(' ';' condicion ';' incr_decr CTE ')' bloque_for",
"bloque_for : '{' bloque_ejecutable sentencia_ejecutable '}'",
"bloque_for : sentencia_ejecutable",
"incr_decr : UP",
"incr_decr : DOWN",
"sentencia_salida : OUT '(' CADENA_MULT ')' ';'",
"sentencia_salida : error '(' CADENA_MULT ')' ';'",
"sentencia_salida : '(' CADENA_MULT ')' ';'",
"sentencia_salida : OUT error CADENA_MULT ')' ';'",
"sentencia_salida : OUT '(' ')' ';'",
"sentencia_salida : OUT '(' error ')' ';'",
"sentencia_salida : OUT '(' CADENA_MULT error ';'",
"sentencia_salida : OUT '(' CADENA_MULT ')'",
"sentencia_salida : OUT '(' factor ')' ';'",
"sentencia_asignacion : ID '=' expresion ';'",
"sentencia_asignacion : error '=' expresion ';'",
"sentencia_asignacion : ID error expresion ';'",
"sentencia_asignacion : ID '=' error ';'",
"sentencia_asignacion : ID '=' expresion",
"sentencia_invocacion : ID '(' lista_parametros ')' ';'",
"sentencia_invocacion : ID '(' ')' ';'",
"sentencia_invocacion : '(' lista_parametros ')' ';'",
"sentencia_invocacion : '(' ')' ';'",
"sentencia_invocacion : ID lista_parametros ')' ';'",
"sentencia_invocacion : ID ')' ';'",
"sentencia_invocacion : ID '(' error ')' ';'",
"sentencia_invocacion : ID '(' lista_parametros ';'",
"sentencia_invocacion : ID '(' ';'",
"sentencia_invocacion : ID '(' lista_parametros ')'",
"sentencia_invocacion : ID '(' ')'",
"lista_parametros : ID ',' ID ',' ID",
"lista_parametros : ID ',' ID",
"lista_parametros : ID",
"lista_parametros : ID ',' ID ',' ID ',' error",
"lista_parametros : ID ',' error",
"lista_parametros : ID ID ID",
"lista_parametros : ID ',' ID ID",
"lista_parametros : ID ID ',' ID",
"lista_parametros : ID ID",
"condicion : expresion comparador expresion",
"condicion : expresion error",
"condicion : expresion comparador error",
"condicion : error comparador expresion",
"comparador : MAYOR_IGUAL",
"comparador : MENOR_IGUAL",
"comparador : '>'",
"comparador : '<'",
"comparador : IGUAL",
"comparador : DISTINTO",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"expresion : expresion '+' error",
"expresion : expresion '-' error",
"expresion : error '+' termino",
"expresion : error '-' termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"termino : termino '*' error",
"termino : termino '/' error",
"termino : error '*' factor",
"termino : error '/' factor",
"factor : ID",
"factor : cte",
"cte : CTE",
"cte : '-' CTE",
};

//#line 280 "gramatica.y"

private AnalizadorLexico analizadorLexico;
private int nroUltimaLinea;

public Parser(AnalizadorLexico analizadorLexico, boolean debug){
	this.analizadorLexico = analizadorLexico;
	this.yydebug = debug;
}

private void yyerror(String mensaje){
	//System.out.println(Main.ANSI_RED + "ERROR | " + mensaje + Main.ANSI_RESET);
}

private int yylex(){
	if (!analizadorLexico.endOfFile()) {
            int id = analizadorLexico.yylex();
            if (id != -1) // caracter invalido
                return id;
            while (!analizadorLexico.endOfFile()) {
                id = analizadorLexico.yylex();
                if (id != -1)
                    return id;
            }
        }
        return 0;
}


public void checkRango(String cte){
	Token token = TablaSimbolos.getToken(cte);
	String tipo = token.getTipoToken();

	if (tipo.equals("LONGINT")){
	    long entero = 0;
		if (Long.parseLong(cte) <= Main.MAX_LONG-1) {
		    entero = Long.parseLong(cte);
		} else {
		    System.out.printf(Main.ANSI_YELLOW + "[AS] | Linea %d: | Entero largo negativo fuera de rango: %s%n" + Main.ANSI_RESET, analizadorLexico.getNroLinea(), cte);
		    entero = Main.MAX_LONG-1;
		}
		String nuevoLexema = "-" + entero;
		int cont = (Integer) (TablaSimbolos.getToken(cte).getAtributo("contador")) - 1;
		//if (cont == 0)
		//  TablaSimbolos.remove(cte);
		//else
		  TablaSimbolos.getToken(cte).addAtributo("contador", cont);
		if (!TablaSimbolos.existe(nuevoLexema)){
		    Token nuevoToken = new Token(token.getIdToken(), "LONGINT", nuevoLexema);
		    nuevoToken.addAtributo("contador", 1);
		    TablaSimbolos.add(nuevoToken);
		}
		else {
		     cont = (Integer) (TablaSimbolos.getToken(nuevoLexema).getAtributo("contador")) + 1 ;
		     TablaSimbolos.getToken(nuevoLexema).addAtributo("contador", cont);
		}
	}
	if (tipo.equals("FLOAT")) {
	    float flotante = 0;
		if ((Main.MIN_FLOAT < Float.parseFloat(cte) && Float.parseFloat(cte) < Main.MAX_FLOAT)) {
		    flotante =  Float.parseFloat(cte);
		} else {
		    System.out.printf(Main.ANSI_YELLOW + "[AS] | Linea %d: | Flotante negativo fuera de rango: %s%n" + Main.ANSI_RESET, analizadorLexico.getNroLinea(), cte);
		    flotante = Main.MAX_FLOAT;
		}
		String nuevoLexema = "-" + flotante;
		int cont = (Integer) (TablaSimbolos.getToken(cte).getAtributo("contador")) - 1;
		//if (cont == 0)
		//  TablaSimbolos.remove(cte);
		//else
		  TablaSimbolos.getToken(cte).addAtributo("contador", cont);
		if (!TablaSimbolos.existe(nuevoLexema)){
		    Token nuevoToken = new Token(token.getIdToken(), "FLOAT", nuevoLexema);
		    nuevoToken.addAtributo("contador", 1);
		    TablaSimbolos.add(nuevoToken);
		}
		else {
		     cont = (Integer) (TablaSimbolos.getToken(nuevoLexema).getAtributo("contador")) + 1 ;
		     TablaSimbolos.getToken(nuevoLexema).addAtributo("contador", cont);
                      }

	}
}
//#line 937 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        nroUltimaLinea = analizadorLexico.getNroLinea();
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 17:
//#line 59 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Declaración de variables %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 18:
//#line 60 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' " + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 19:
//#line 61 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta lista de variables " + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 22:
//#line 66 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' " + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 25:
//#line 73 "gramatica.y"
{
							String cte = val_peek(3).sval;
							if (TablaSimbolos.getToken(cte).getTipoToken().equals("LONGINT"))
							System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());
							else
							System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Tipo incorrecto de CTE NI %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 26:
//#line 79 "gramatica.y"
{
							String cte = val_peek(3).sval;
							if (TablaSimbolos.getToken(cte).getTipoToken().equals("LONGINT"))
                            				System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());
                            				else
                                                        System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Tipo incorrecto de CTE NI %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 27:
//#line 85 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada PROC en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 28:
//#line 86 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada PROC en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 29:
//#line 87 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta definir el identificador en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 30:
//#line 88 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta definir el identificador en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 31:
//#line 89 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en el identificador en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 32:
//#line 90 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en el identificador en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 33:
//#line 91 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 34:
//#line 92 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 35:
//#line 93 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en la lista de parámetros formales en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 36:
//#line 94 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 37:
//#line 95 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 38:
//#line 96 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada NI en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 39:
//#line 97 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada NI en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 40:
//#line 98 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '=' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 41:
//#line 99 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '=' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 42:
//#line 100 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta constante NI en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 43:
//#line 101 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta constante NI en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 44:
//#line 102 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '{' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 45:
//#line 103 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '{' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 46:
//#line 104 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta bloque de sentencias en declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 47:
//#line 105 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta bloque de sentencias en declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 48:
//#line 106 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta control de invocaciones %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 49:
//#line 107 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta control de invocaciones %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 50:
//#line 111 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Lista de parámetros formales (3) %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 51:
//#line 112 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Lista de parámetros formales (2) %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 52:
//#line 113 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Lista de parámetros formales (1) %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 53:
//#line 114 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' entre los primeros dos parámetros formales %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 54:
//#line 115 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' entre los últimos dos parámetros formales %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 55:
//#line 116 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' entre los parámetros formales %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 56:
//#line 117 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Número de parámetros formales permitidos excedido %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 57:
//#line 118 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Parámetro formal incorrecto %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 58:
//#line 121 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Parámetro formal %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 59:
//#line 122 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Parámetro formal %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 60:
//#line 123 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta definir el tipo del parámetro formal %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 61:
//#line 124 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta definir el tipo del parámetro formal %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 62:
//#line 127 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 63:
//#line 128 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 64:
//#line 129 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada THEN en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 65:
//#line 130 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada THEN en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 66:
//#line 131 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada ELSE %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 67:
//#line 132 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta bloque de sentencias luego de THEN en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 68:
//#line 133 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta bloque de sentencias luego de THEN en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 69:
//#line 134 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en bloque de sentencias luego de THEN en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 70:
//#line 135 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en bloque de sentencias luego de THEN en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 71:
//#line 136 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 72:
//#line 137 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada END_IF y literal ';' en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 73:
//#line 138 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta bloque de sentencias luego de ELSE en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 74:
//#line 139 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en bloque de sentencias luego de ELSE en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 75:
//#line 140 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada END_IF en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 76:
//#line 141 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 77:
//#line 142 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en la condicion del IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 78:
//#line 143 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta la condicion del IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 80:
//#line 147 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta parentesis '(' %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 81:
//#line 148 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta parentesis ')' %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 82:
//#line 149 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta condicion %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 83:
//#line 150 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Faltan parentesis %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 86:
//#line 160 "gramatica.y"
{
							String cte = val_peek(2).sval;
							if (TablaSimbolos.getToken(cte).getTipoToken().equals("LONGINT"))
							System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de control FOR %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());
							else
							System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Constante no es del tipo entero %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());
							}
break;
case 87:
//#line 167 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada FOR en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 88:
//#line 168 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 89:
//#line 169 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta identificador de control en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 90:
//#line 170 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '=' para inicializar identificador de control en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 91:
//#line 171 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta constante para inicializar identificador de control en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 92:
//#line 172 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' luego de expresión de inicialización en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 93:
//#line 173 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta condición de control en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 94:
//#line 174 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' luego de condición de control en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 95:
//#line 175 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta indicar incremento o decremento de la sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 96:
//#line 176 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta indicar constante de paso para incremento/decremento en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 97:
//#line 177 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 98:
//#line 178 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en el cuerpo de la sentencia de control. Se encontró referencia a sentencia declarativa. %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 99:
//#line 179 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta identificador de control en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 104:
//#line 190 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de salida OUT %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 105:
//#line 191 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada OUT en sentencia de salida %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 106:
//#line 192 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada OUT en sentencia de salida %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 107:
//#line 193 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de salida %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 108:
//#line 194 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta cadena multilínea a imprimir en sentencia de salida %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 109:
//#line 195 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en la cadena multilínea a imprimir en sentencia de salida %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 110:
//#line 196 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de salida %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 111:
//#line 197 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' en sentencia de salida %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 113:
//#line 201 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de asignación %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 114:
//#line 202 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta lado izquierdo de la asignación %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 115:
//#line 203 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '=' en sentencia de asignación %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 116:
//#line 204 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta lado derecho de la asignación %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 117:
//#line 205 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' al final de la asignación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 118:
//#line 208 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de invocación con lista de parámetros %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 119:
//#line 209 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de invocación sin parámetros %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 120:
//#line 210 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta el identificador del procedimiento a invocar %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 121:
//#line 211 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta el identificador del procedimiento a invocar %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 122:
//#line 212 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de invocación %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 123:
//#line 213 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de invocación %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 124:
//#line 214 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: | Parámetros inválidos %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 125:
//#line 215 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de invocación %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 126:
//#line 216 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: | Falta literal ')' en sentencia de invocación %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 127:
//#line 217 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: | Falta literal ';' en sentencia de invocación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 128:
//#line 218 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: | Falta literal ';' en sentencia de invocación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 129:
//#line 221 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Lista de parámetros (3) %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 130:
//#line 222 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Lista de parámetros (2) %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 131:
//#line 223 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Lista de parámetros (1) %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 132:
//#line 224 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Número de parámetros permitidos excedido %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 133:
//#line 225 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Parámetro incorrecto %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 134:
//#line 226 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Faltan literales ',' entre parámetros %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 135:
//#line 227 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' entre parámetros %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 136:
//#line 228 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' entre parámetros %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 137:
//#line 229 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' entre parámetros %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 138:
//#line 233 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Comparación %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 139:
//#line 234 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta comparador %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 140:
//#line 235 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta el segundo operando de la condición %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 141:
//#line 236 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta el primer operando de la condición %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 144:
//#line 241 "gramatica.y"
{yyval = new ParserVal('>');}
break;
case 145:
//#line 242 "gramatica.y"
{yyval = new ParserVal('<');}
break;
case 148:
//#line 247 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Suma %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 149:
//#line 248 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Resta %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 151:
//#line 250 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: | Falta el segundo operando en la suma %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 152:
//#line 251 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: | Falta el segundo operando en la resta %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 153:
//#line 252 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d:| Falta el primer operando en la suma %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 154:
//#line 253 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: | Falta el primer operando en la resta %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 155:
//#line 256 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Multiplicación %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 156:
//#line 257 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: División %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 158:
//#line 259 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: | Falta el segundo operando en la multiplicación %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 159:
//#line 260 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: | Falta el segundo operando en la división %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 160:
//#line 261 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: | Falta el primer operando en la multiplicación %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 161:
//#line 262 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: | Falta el primer operando en la división %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 164:
//#line 269 "gramatica.y"
{String cte = val_peek(0).sval;
           }
break;
case 165:
//#line 271 "gramatica.y"
{ String cte = val_peek(0).sval;
      		  checkRango(cte);
      		  yyval = new ParserVal("-" + cte);
      		  String cte_nueva= "-"+cte;
      		  System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Constante negativa %s %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea(), cte_nueva);
     	 	}
break;
//#line 1624 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
