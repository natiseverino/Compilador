//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
package compilador;
//#line 19 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
public static ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short IGUAL=257;
public final static short MAYOR_IGUAL=258;
public final static short MENOR_IGUAL=259;
public final static short DISTINTO=260;
public final static short IF=261;
public final static short THEN=262;
public final static short ELSE=263;
public final static short FOR=264;
public final static short END_IF=265;
public final static short OUT=266;
public final static short FUNC=267;
public final static short RETURN=268;
public final static short LONGINT=269;
public final static short FLOAT=270;
public final static short ID=271;
public final static short CTE=272;
public final static short CADENA_MULT=273;
public final static short PROC=274;
public final static short VAR=275;
public final static short NI=276;
public final static short UP=277;
public final static short DOWN=278;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    1,    1,    1,    1,    2,    2,    3,    3,    6,
    6,    7,    7,    8,    8,    4,    4,    5,    5,    5,
    5,    5,    9,    9,    9,   17,   17,   17,   16,   16,
   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
   10,   10,   10,   18,   18,   18,   18,   18,   18,   18,
   18,   20,   20,   20,   20,   11,   11,   11,   11,   11,
   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
   12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
   12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
   12,   12,   12,   12,   12,   22,   22,   13,   13,   13,
   13,   13,   13,   13,   14,   14,   14,   14,   14,   15,
   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   24,   24,   24,   24,   24,   24,   24,   24,   24,   25,
   21,   21,   21,   21,   27,   27,   27,   27,   27,   27,
   23,   23,   23,   23,   23,   23,   23,   28,   28,   28,
   28,   28,   28,   28,   26,   26,   19,   19,
};
final static short yylen[] = {                            2,
    1,    1,    1,    2,    1,    2,    1,    2,    1,    4,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    3,    3,    3,    3,    1,    2,    1,    1,
   11,   10,   10,    9,   10,    9,   11,   10,   11,   10,
   11,   10,   10,   11,   10,   11,   10,   11,   10,   10,
    9,   10,    9,    5,    3,    1,    4,    4,    2,    7,
    3,    2,    3,    2,    3,    8,   10,    7,    9,    7,
    9,    8,   10,    7,    9,    8,   10,    7,    9,    8,
   10,    8,    8,    7,    9,   10,   10,   10,    9,    8,
   14,   12,   13,   11,   14,   12,   14,   12,   14,   12,
   14,   12,   14,   12,   14,   12,   13,   11,   14,   12,
   14,   12,   14,   12,   14,    1,    1,    5,    5,    5,
    4,    5,    5,    4,    4,    4,    4,    4,    3,    5,
    4,    4,    3,    4,    3,    5,    5,    4,    4,    3,
    5,    3,    1,    7,    3,    3,    4,    4,    2,    1,
    3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
    3,    3,    1,    3,    3,    3,    3,    3,    3,    1,
    3,    3,    3,    3,    1,    1,    1,    2,
};
final static short yydefred[] = {                         0,
    0,    0,    0,    0,   29,   30,    0,    0,    0,    0,
    1,    0,    0,    7,    9,   16,   17,   18,   19,   20,
   21,   22,    0,    0,    0,    0,  175,  177,    0,    0,
  176,    0,    0,  170,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  150,    0,    0,    0,    0,
    0,    0,    0,    0,    6,    0,    8,    0,    0,    0,
    0,    0,    0,  159,  155,  156,  160,  157,  158,    0,
    0,    0,    0,    0,    0,    0,    0,  178,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  135,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  133,    0,    0,   25,    0,   28,   24,
   23,    0,  126,    0,    0,    0,  173,  174,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  171,  168,  172,  169,    0,    0,    0,    0,    0,
    0,    0,    0,  121,  127,   64,  138,    0,    0,    0,
    0,  131,   62,    0,    0,    0,    0,    0,  128,  125,
  134,  145,    0,    0,  146,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  132,    0,    0,   26,  119,
    0,    0,   15,   14,    0,   11,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  120,  122,  123,  118,  136,
   65,   63,    0,    0,    0,    0,    0,  137,  130,    0,
  147,  148,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   13,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   58,   57,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   70,    0,   74,    0,    0,    0,    0,    0,    0,   78,
    0,    0,    0,    0,   68,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   72,   10,    0,    0,    0,   76,
    0,   80,   90,    0,   82,    0,    0,    0,   83,   66,
    0,    0,    0,    0,    0,    0,    0,  116,  117,    0,
    0,    0,    0,    0,  144,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   71,   75,    0,    0,   79,
    0,   85,    0,    0,   69,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   34,    0,   60,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   53,    0,   51,    0,
    0,    0,    0,    0,    0,   36,    0,    0,   73,   77,
   81,   86,   87,   88,   67,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   33,   38,    0,   40,    0,
   43,    0,   45,   47,   49,   32,   42,    0,    0,    0,
   52,    0,   50,   35,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  108,   37,   39,   41,
   44,   46,   48,   31,    0,   94,    0,   96,    0,   98,
    0,  100,    0,  102,    0,  104,    0,  106,    0,  110,
    0,  112,    0,  114,    0,   92,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  107,
   93,   95,   97,   99,  101,  103,  105,  109,  111,  113,
  115,   91,
};
final static short yydgoto[] = {                         10,
   11,   12,   13,   14,   15,  195,  237,  196,   16,   17,
   18,   19,   20,   21,   22,   23,   60,   98,   31,   99,
   32,  351,   33,   44,   45,   34,   74,   35,
};
final static short yysindex[] = {                       442,
    5,  182,   21,   27,    0,    0,   10,  104,   65,    0,
    0,  605,  370,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -166, -246,  664,  979,    0,    0,   68, -240,
    0,   19, 1023,    0,   60, -190, -156, -205,   -1,  664,
   63,   66,  703,   58,   33,    0,   97,   40,   98,   84,
  109,  134,    5,  370,    0,  638,    0,  142,  -41,  -54,
  140,  595,  105,    0,    0,    0,    0,    0,    0,  736,
  736,  135,  135,  664, 1167,  -90,    8,    0,  -57,  664,
  779,  833,  869,  874,  925,  149,  160,  -38,  286,  300,
   41,  340,  466,   -3, -136,  -51,  137,  368,  276,   45,
    0,  460,  484,  364,  927,   91,  110,  348,  416,  164,
  179,  429,  207,    0,  445,  314,    0,  204,    0,    0,
    0,  471,    0,  123,   60,   60,    0,    0,   95,  255,
  559,  559, -228,  559,   95,  123,   60,  123,   60,  595,
   95,    0,    0,    0,    0,  262,  265,  267, -226,  485,
  491,  493,  503,    0,    0,    0,    0,  505,  304,  307,
  518,    0,    0,  305, -153,  536,  523,  525,    0,    0,
    0,    0,  112,  135,    0,  327,  565,  335,  566,  -17,
 -203,  -35,  551,  337,  556,    0,   35,  557,    0,    0,
  559,  605,    0,    0,  -76,    0,  -66,  559,  400,  171,
  571,  576,  580,  584,  -52,    0,    0,    0,    0,    0,
    0,    0,   53,  564,  164,  633,  272,    0,    0,  135,
    0,    0,  586,  372,  589,  379,  607,  397,  614,  113,
  615, -191,   53,  619,  931,  213,  605,    0,  559,  622,
  559,  625,  268,  513,  475,  629,  174,  559,  630,  931,
  931,  931,  931,  931,  935,  567,   53,  272,    0,    0,
  663,   53,  649,   53,  654,   53,  659,   53,   53,  114,
   53,  672,  148,  602,   53,  675,  559,  676,  612,  473,
    0,  482,    0,  559,  684,  559,  691,  511,  506,    0,
  709,  537,  -50,  509,    0,  711,  720,  724,  738,  740,
 1181,  -58,  442,  671,  760,  549,  687,   53,  694,   53,
  695,   53,  696,  698,  699,  570,  712,   53,   53,  524,
  442,  725,  -85,  578,    0,    0,  755,  794,  600,    0,
  603,    0,    0,  801,    0,    2,  818,  -96,    0,    0,
  821,  -85,  -85,  -85,  -85,  -85,  -85,    0,    0, -194,
  609,  759,  442,  631,    0,  442,  762,  442,  767,  442,
  769,  442,  442,  442,  358,  780,  442,  781,  783,  784,
  581,  786,  442,  644,  858,    0,    0,  859,  863,    0,
  864,    0,  865,  -48,    0,  653,  655,  656,  657,  658,
  662,  665, -197,  890,    0,  815,    0,  824,  442,  835,
  442,  837,  442,  840,  844,  852,    0,  856,    0,  857,
  442,  442,  442,  593,  875,    0,  877,  914,    0,    0,
    0,    0,    0,    0,    0,  949,  962,  975,  977,  982,
  984,  986,  990,  121,  677,    0,    0,  909,    0,  920,
    0,  921,    0,    0,    0,    0,    0,  930,  932,  936,
    0,  940,    0,    0,  686,  690,  723,  735,  749,  772,
  776,  792,  798,  816,  830,  370,    0,    0,    0,    0,
    0,    0,    0,    0,  370,    0,  370,    0,  370,    0,
  370,    0,  370,    0,  370,    0,  370,    0,  370,    0,
  370,    0,  370,    0,  722,    0,  702,  748,  842,  846,
  860,  872,  873,  886,  892,  904,  905,   18,  924,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,
};
final static short yyrindex[] = {                         0,
   16,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   17,   36,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   29,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  122,    0,    0,    0,    0,    3,
    0,    0,    0,   57,    0,    0,    0,    0,  -45,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  131,    0,    0,  -31,    0,
    0,    0,  302,    0,    0,  125,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   52,   87,    0,    0,  -39,    0,
    0,    0,    0,    0,  -28,  155,  203,  331,  495,  -26,
  -20,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  388,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -29,    0,  431,    0,    0,
    0,    0,  126,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  131,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -23,  -16,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  147,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  627,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  458,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -15,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  521,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,
};
final static short yygindex[] = {                         0,
 1050,    0,   31,   -8,  -13, 1098,    0, -173,    0,    0,
    0,    0,    0,    0,    0, 1151,  -22,  392, 1209,  -64,
  966,  919,  133,   13, 1129, 1245, 1011,  478,
};
final static int YYTABLESIZE=1529;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         57,
  350,  154,  118,   55,  121,  232,  255,  162,  340,   56,
  425,   59,  152,   27,  153,    5,    2,   61,  238,  154,
  151,   52,  149,  228,   55,   54,   61,  198,  163,  204,
  152,   78,  153,  199,  166,    3,  119,  158,  151,   92,
   57,   24,   54,  175,   24,  205,  175,  175,  133,   41,
   42,  166,  229,  100,   30,  157,    4,   24,  433,   79,
   37,  392,   25,  279,  272,   25,   39,   89,  163,  163,
   43,  163,  230,  163,  434,  158,  105,   30,   25,  109,
   86,  153,  348,  349,  273,  168,  167,  163,  163,   58,
  163,  166,  166,  157,  166,  189,  166,   30,  104,   87,
  216,   84,  215,   96,   59,   51,   85,   30,   76,   30,
  166,  166,   30,  166,   88,    5,    6,  194,  194,  159,
  194,   95,  193,  193,  101,  193,  167,  167,  100,  167,
  140,  167,    5,    6,  174,   30,  107,   81,  111,   82,
    5,    2,  521,   49,  113,  167,  167,   81,  167,   82,
  176,  259,  260,  163,  164,  220,   30,   63,   30,  383,
    3,  465,  143,  123,   72,  149,  142,  114,  384,   73,
  140,  131,   93,  270,  115,  103,  166,  194,  194,   30,
  122,    4,  193,  193,  194,  194,  239,  141,  240,  193,
  193,  348,  349,  305,  164,  164,  241,  164,  242,  164,
  117,  120,  161,  254,  134,  339,  129,  424,  320,  146,
   27,  167,  135,  164,  164,  141,  164,  148,  348,  349,
  147,   29,  154,  194,  161,  194,   30,  194,  193,   59,
  193,  194,  193,  152,  194,  153,  193,  154,  154,  193,
  231,  151,  161,  161,   56,  161,   59,  161,  152,  152,
  153,  153,   61,  156,   90,  140,  151,  151,  227,   55,
   54,  161,  161,  194,  161,   40,  381,  156,  193,  132,
  194,   91,  194,  175,  175,  193,   36,  193,  194,  164,
   27,   28,   38,  193,  163,  163,  163,  163,  163,  163,
  163,  163,  163,  163,  163,  108,  152,  163,  163,  163,
  167,  129,  163,   27,   28,  163,  163,  166,  166,  166,
  166,  166,  166,  166,  166,  166,  166,  166,   94,  165,
  166,  166,  166,   75,   28,  166,  150,  161,  166,  166,
  165,    5,    6,   27,   28,   50,   28,   95,   27,   28,
  151,  129,  167,  167,  167,  167,  167,  167,  167,  167,
  167,  167,  167,  110,  188,  167,  167,  167,   30,   47,
  167,   27,   28,  167,  167,  110,    5,    6,  269,  315,
  165,  165,   95,  165,   48,  165,  464,  143,    5,    6,
  149,  142,   27,   28,   95,   28,  140,  124,  178,  165,
  165,  140,  165,  140,  140,  140,  140,    9,  154,  140,
  140,  140,  141,  319,  140,   27,   28,  163,  164,    9,
  164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
  164,  467,  171,  164,  164,  164,  129,  124,  164,  291,
  139,  164,  164,  248,  156,  249,  292,   26,  293,    9,
  112,  476,  478,  480,  482,  484,  486,  488,  490,  492,
  494,  496,   27,   28,  183,  165,  181,   84,  161,  161,
  161,  161,  161,  161,  161,  161,  161,  161,  161,  184,
  139,  161,  161,  161,   59,  277,  161,  278,  185,  161,
  161,    9,  407,   57,   57,   57,   57,   57,   57,   57,
   57,   57,   57,   57,  162,   57,  497,   84,  177,  179,
  182,   72,   70,  186,   71,  498,   73,  499,   81,  500,
   82,  501,  124,  502,    9,  503,  191,  504,  169,  505,
   89,  506,  192,  507,  155,  509,   81,  110,   82,  190,
  284,  110,  285,  201,  162,  162,  202,  162,  203,  162,
    5,    6,  170,  206,    5,    6,   95,  125,  126,  207,
   95,  208,   24,  162,  162,  139,  162,  129,  137,  139,
   89,  209,  129,  210,  129,  129,  129,  129,   30,  187,
  129,  129,  129,   25,  211,  129,    9,  212,  213,  217,
  214,  218,   84,  219,   27,   28,  165,  165,  165,  165,
  165,  165,  165,  165,  165,  165,  165,  192,    9,  165,
  165,  165,  223,  110,  165,  224,  226,  165,  165,    9,
  225,  233,  234,    1,  235,  162,    5,    6,    2,  162,
    9,    3,   95,    4,  257,   53,    5,    6,    7,  250,
    2,    8,    9,    3,  251,    4,   72,   70,  252,   71,
   56,   73,  253,  124,    9,   89,  262,  263,  124,  264,
  124,  124,  124,  124,  265,  244,  124,  124,  124,  192,
    2,  124,  245,    3,  246,    4,   12,  266,    5,    6,
    7,  180,  267,    8,  268,  271,  258,  116,   42,  275,
  281,  192,   30,  283,    5,    6,  139,  290,  295,  303,
   95,  139,  365,  139,  139,  139,  139,    1,   43,  139,
  139,  139,    2,  414,  139,    3,  306,    4,   30,  308,
    5,    6,    7,   84,  310,    8,    9,  451,   84,  312,
   84,   84,   84,   84,  321,    9,   84,   84,   84,    9,
   53,   84,  318,  323,  325,    2,  326,  327,    3,  288,
    4,    9,  330,    5,    6,    7,  328,   30,    8,  332,
  162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
  162,    9,    9,  162,  162,  162,  333,  335,  162,  342,
  334,  162,  162,  341,    9,  286,   89,  287,  343,  370,
   30,   89,  344,   89,   89,   89,   89,    9,    9,   89,
   89,   89,  336,  353,   89,   28,  345,    2,  346,  466,
    3,  337,    4,  354,  355,    5,    6,    7,  475,  356,
    8,    9,  477,  376,   53,    9,  358,  360,  362,    2,
  363,  364,    3,   30,    4,    1,  510,    5,    6,    7,
    2,    9,    8,    3,  367,    4,    1,    9,    5,    6,
    7,    2,  375,    8,    3,  479,    4,  373,    1,    5,
    6,    7,  377,    2,    8,    9,    3,  481,    4,  380,
   53,    5,    6,    7,  378,    2,    8,  379,    3,    9,
    4,  483,  511,    5,    6,    7,  382,   30,    8,  385,
  394,    9,   12,  395,  399,    9,  397,   12,  110,  401,
   12,  403,   12,   40,  485,   12,   12,   12,  487,    9,
   12,    5,    6,  411,  409,  412,  413,   95,   27,   28,
  416,    9,    9,   30,  489,  418,  419,  420,   30,   62,
  491,  421,  422,  423,  426,    9,  427,  428,  429,  430,
  435,    9,   53,  431,   27,   28,  432,    2,  493,  436,
    3,   53,    4,    9,    9,   53,    2,   56,  437,    3,
    2,    4,  495,    3,  455,    4,   56,   53,  102,  439,
   56,  441,    2,    9,  443,    3,  512,    4,  444,   30,
  513,   30,   56,   27,   28,   30,  445,  508,   53,   30,
  446,  447,    2,    2,  514,    3,    3,    4,    4,  456,
   53,  124,   56,   56,   77,    2,  515,  516,    3,  453,
    4,  454,  457,   53,   53,   56,   27,   28,    2,    2,
  517,    3,    3,    4,    4,  458,  518,  459,   56,   56,
   72,   70,  460,   71,  461,   73,  462,   53,  519,  520,
  463,   53,    2,  468,  136,    3,    2,    4,   69,    3,
   68,    4,   56,   83,  469,  470,   56,   53,  522,   27,
   28,    0,    2,   53,  471,    3,  472,    4,    2,    0,
  473,    3,   56,    4,  474,   81,    0,   82,   56,    0,
    0,   53,    0,    0,    0,    0,    2,    0,    0,    3,
    0,    4,   69,    0,   68,   53,   56,    0,  138,    0,
    2,    0,    0,    3,    0,    4,    0,   53,    0,    0,
   56,   53,    2,   27,   28,    3,    2,    4,    0,    3,
    0,    4,   56,    0,    0,   53,   56,    0,    0,    0,
    2,    0,    0,    3,  140,    4,    0,   53,   53,  142,
   56,    0,    2,    2,    0,    3,    3,    4,    4,   27,
   28,   53,   56,   56,   27,   28,    2,   53,    0,    3,
    0,    4,    2,    0,    0,    3,   56,    4,    0,   53,
   53,    0,   56,    0,    2,    2,    0,    3,    3,    4,
    4,    0,    0,  106,   56,   56,    0,    0,    0,   53,
  144,    0,  172,    0,    2,    0,   26,    3,    0,    4,
  301,   97,    0,    0,   56,   27,   28,   27,   28,   97,
  276,   27,   28,    0,    0,   27,   28,  130,   72,   70,
    0,   71,    0,   73,    0,  296,  297,  298,  299,  300,
  302,    0,   72,   70,    0,   71,   69,   73,   68,  197,
    0,  200,    0,  173,  175,   64,   65,   66,   67,  347,
   69,  374,   68,    0,    0,  160,    0,    0,    0,   97,
    0,   46,    0,   46,    0,    0,    0,   97,   97,   97,
  386,  387,  388,  389,  390,  391,    0,    0,  393,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   80,   64,
   65,   66,   67,    0,    0,   46,    0,    0,  236,   46,
    0,    0,    0,    0,    0,  243,  247,    0,    0,    0,
   46,  221,  222,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   97,  127,  128,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  143,  145,
    0,    0,    0,    0,    0,    0,  280,    0,  282,    0,
    0,    0,  289,    0,    0,  294,    0,    0,  261,   46,
   46,    0,  352,    0,    0,    0,    0,    0,    0,    0,
   46,    0,    0,    0,    0,  366,   97,   97,    0,    0,
  372,    0,    0,    0,  324,    0,    0,    0,    0,    0,
    0,  329,    0,  331,    0,    0,    0,    0,    0,  338,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  396,    0,    0,  398,    0,  400,   97,  402,
    0,  404,  405,  406,  408,    0,  410,   46,   46,    0,
  415,  256,  417,   64,   65,   66,   67,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   64,   65,   66,
   67,  274,    0,    0,    0,    0,    0,    0,  438,    0,
  440,    0,  442,    0,    0,    0,    0,    0,    0,    0,
  448,  449,  450,  452,   46,  304,    0,    0,    0,    0,
  307,    0,  309,    0,  311,    0,  313,  314,  316,  317,
    0,    0,    0,  322,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  357,    0,  359,    0,
  361,    0,    0,    0,    0,    0,  368,  369,  371,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         13,
   59,   41,   44,   12,   59,   41,   59,   59,   59,   41,
   59,   41,   41,   59,   41,    0,    0,   41,  192,   59,
   41,    9,   61,   41,   41,   41,  273,  256,    0,  256,
   59,  272,   59,  262,   99,    0,   59,   41,   59,   41,
   54,   40,   12,   41,   40,  272,   44,   45,   41,   40,
   41,    0,  256,   41,   45,   59,    0,   40,  256,   41,
   40,  256,   61,  237,  256,   61,   40,  273,   40,   41,
   61,   43,  276,   45,  272,   41,   44,   45,   61,   40,
  271,   41,  277,  278,  276,   41,    0,   59,   60,  256,
   62,   40,   41,   59,   43,  118,   45,   45,   41,  256,
  165,   42,  256,   41,  271,   41,   47,   45,   41,   45,
   59,   60,   45,   62,  271,  269,  270,  131,  132,  256,
  134,  275,  131,  132,   59,  134,   40,   41,  116,   43,
    0,   45,  269,  270,   44,   45,   40,   43,   41,   45,
  125,  125,  125,   40,   61,   59,   60,   43,   62,   45,
   41,  216,  217,  125,    0,   44,   45,   25,   45,  256,
  125,   41,   41,   59,   42,   41,   41,   59,  265,   47,
   40,  262,   40,   61,   41,   43,  125,  191,  192,   45,
   41,  125,  191,  192,  198,  199,  263,   41,  265,  198,
  199,  277,  278,  258,   40,   41,  263,   43,  265,   45,
   59,  256,    0,  256,  262,  256,   74,  256,   61,   61,
  256,  125,   80,   59,   60,   83,   62,  256,  277,  278,
   61,   40,  262,  237,  276,  239,   45,  241,  237,  271,
  239,  245,  241,  262,  248,  262,  245,  277,  278,  248,
  276,  262,   40,   41,  276,   43,  276,   45,  277,  278,
  277,  278,  276,  271,  256,  125,  277,  278,  276,  276,
  276,   59,   60,  277,   62,  256,  265,  271,  277,  262,
  284,  273,  286,  271,  272,  284,  256,  286,  292,  125,
  271,  272,  256,  292,  256,  257,  258,  259,  260,  261,
  262,  263,  264,  265,  266,  256,  256,  269,  270,  271,
  256,    0,  274,  271,  272,  277,  278,  256,  257,  258,
  259,  260,  261,  262,  263,  264,  265,  266,  256,   44,
  269,  270,  271,  256,  272,  274,   41,  125,  277,  278,
    0,  269,  270,  271,  272,  271,  272,  275,  271,  272,
   41,   40,  256,  257,  258,  259,  260,  261,  262,  263,
  264,  265,  266,  256,   41,  269,  270,  271,   45,  256,
  274,  271,  272,  277,  278,  256,  269,  270,  256,  256,
   40,   41,  275,   43,  271,   45,  256,  256,  269,  270,
  256,  256,  271,  272,  275,  272,  256,    0,   41,   59,
   60,  261,   62,  263,  264,  265,  266,   40,   59,  269,
  270,  271,  256,  256,  274,  271,  272,  271,   41,   40,
  256,  257,  258,  259,  260,  261,  262,  263,  264,  265,
  266,  435,   59,  269,  270,  271,  125,   40,  274,  256,
    0,  277,  278,  263,  271,  265,  263,  256,  265,   40,
   49,  455,  456,  457,  458,  459,  460,  461,  462,  463,
  464,  465,  271,  272,  276,  125,   41,    0,  256,  257,
  258,  259,  260,  261,  262,  263,  264,  265,  266,   41,
   40,  269,  270,  271,  271,  263,  274,  265,  272,  277,
  278,   40,  125,  497,  498,  499,  500,  501,  502,  503,
  504,  505,  506,  507,    0,  509,  466,   40,  107,  108,
  109,   42,   43,   59,   45,  475,   47,  477,   43,  479,
   45,  481,  125,  483,   40,  485,  262,  487,   59,  489,
    0,  491,  123,  493,   59,  495,   43,  256,   45,   59,
  263,  256,  265,  272,   40,   41,  272,   43,  272,   45,
  269,  270,   59,   59,  269,  270,  275,   70,   71,   59,
  275,   59,   40,   59,   60,  125,   62,  256,   81,   82,
   40,   59,  261,   59,  263,  264,  265,  266,   45,  256,
  269,  270,  271,   61,  271,  274,   40,  271,   61,   44,
  276,   59,  125,   59,  271,  272,  256,  257,  258,  259,
  260,  261,  262,  263,  264,  265,  266,  123,   40,  269,
  270,  271,  276,  256,  274,   41,   41,  277,  278,   40,
  276,   61,  276,  256,   59,   59,  269,  270,  261,  125,
   40,  264,  275,  266,   61,  256,  269,  270,  271,   59,
  261,  274,   40,  264,   59,  266,   42,   43,   59,   45,
  271,   47,   59,  256,   40,  125,   61,  276,  261,   61,
  263,  264,  265,  266,  276,  256,  269,  270,  271,  123,
  261,  274,  263,  264,  265,  266,   40,   61,  269,  270,
  271,  256,  276,  274,   61,   61,   44,   40,   41,   61,
   59,  123,   45,   59,  269,  270,  256,   59,   59,  123,
  275,  261,  123,  263,  264,  265,  266,  256,   61,  269,
  270,  271,  261,  123,  274,  264,   44,  266,   45,   61,
  269,  270,  271,  256,   61,  274,   40,  125,  261,   61,
  263,  264,  265,  266,  123,   40,  269,  270,  271,   40,
  256,  274,   61,   59,   59,  261,  125,  265,  264,  265,
  266,   40,   59,  269,  270,  271,  265,   45,  274,   59,
  256,  257,  258,  259,  260,  261,  262,  263,  264,  265,
  266,   40,   40,  269,  270,  271,  256,   59,  274,   59,
  265,  277,  278,  265,   40,  263,  256,  265,   59,  256,
   45,  261,   59,  263,  264,  265,  266,   40,   40,  269,
  270,  271,  256,  123,  274,  272,   59,  261,   59,  123,
  264,  265,  266,   44,  256,  269,  270,  271,  123,  123,
  274,   40,  123,   59,  256,   40,  123,  123,  123,  261,
  123,  123,  264,   45,  266,  256,  125,  269,  270,  271,
  261,   40,  274,  264,  123,  266,  256,   40,  269,  270,
  271,  261,  265,  274,  264,  123,  266,  123,  256,  269,
  270,  271,   59,  261,  274,   40,  264,  123,  266,   59,
  256,  269,  270,  271,  265,  261,  274,  265,  264,   40,
  266,  123,  125,  269,  270,  271,   59,   45,  274,   59,
  272,   40,  256,  125,  123,   40,  256,  261,  256,  123,
  264,  123,  266,  256,  123,  269,  270,  271,  123,   40,
  274,  269,  270,  123,  125,  123,  123,  275,  271,  272,
  125,   40,   40,   45,  123,  272,   59,   59,   45,  256,
  123,   59,   59,   59,  272,   40,  272,  272,  272,  272,
   41,   40,  256,  272,  271,  272,  272,  261,  123,  125,
  264,  256,  266,   40,   40,  256,  261,  271,  125,  264,
  261,  266,  123,  264,   41,  266,  271,  256,  256,  125,
  271,  125,  261,   40,  125,  264,  125,  266,  125,   45,
  125,   45,  271,  271,  272,   45,  125,  256,  256,   45,
  125,  125,  261,  261,  125,  264,  264,  266,  266,   41,
  256,  256,  271,  271,   29,  261,  125,  125,  264,  125,
  266,  125,   41,  256,  256,  271,  271,  272,  261,  261,
  125,  264,  264,  266,  266,   41,  125,   41,  271,  271,
   42,   43,   41,   45,   41,   47,   41,  256,  125,  125,
   41,  256,  261,  125,  256,  264,  261,  266,   60,  264,
   62,  266,  271,   33,  125,  125,  271,  256,  125,  271,
  272,   -1,  261,  256,  125,  264,  125,  266,  261,   -1,
  125,  264,  271,  266,  125,   43,   -1,   45,  271,   -1,
   -1,  256,   -1,   -1,   -1,   -1,  261,   -1,   -1,  264,
   -1,  266,   60,   -1,   62,  256,  271,   -1,  256,   -1,
  261,   -1,   -1,  264,   -1,  266,   -1,  256,   -1,   -1,
  271,  256,  261,  271,  272,  264,  261,  266,   -1,  264,
   -1,  266,  271,   -1,   -1,  256,  271,   -1,   -1,   -1,
  261,   -1,   -1,  264,  256,  266,   -1,  256,  256,  256,
  271,   -1,  261,  261,   -1,  264,  264,  266,  266,  271,
  272,  256,  271,  271,  271,  272,  261,  256,   -1,  264,
   -1,  266,  261,   -1,   -1,  264,  271,  266,   -1,  256,
  256,   -1,  271,   -1,  261,  261,   -1,  264,  264,  266,
  266,   -1,   -1,   45,  271,  271,   -1,   -1,   -1,  256,
  256,   -1,  256,   -1,  261,   -1,  256,  264,   -1,  266,
  256,   41,   -1,   -1,  271,  271,  272,  271,  272,   49,
  235,  271,  272,   -1,   -1,  271,  272,   41,   42,   43,
   -1,   45,   -1,   47,   -1,  250,  251,  252,  253,  254,
  255,   -1,   42,   43,   -1,   45,   60,   47,   62,  132,
   -1,  134,   -1,  105,  106,  257,  258,  259,  260,   59,
   60,  323,   62,   -1,   -1,   95,   -1,   -1,   -1,   99,
   -1,    7,   -1,    9,   -1,   -1,   -1,  107,  108,  109,
  342,  343,  344,  345,  346,  347,   -1,   -1,  350,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,
  258,  259,  260,   -1,   -1,   41,   -1,   -1,  191,   45,
   -1,   -1,   -1,   -1,   -1,  198,  199,   -1,   -1,   -1,
   56,  173,  174,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  165,   72,   73,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   84,   85,
   -1,   -1,   -1,   -1,   -1,   -1,  239,   -1,  241,   -1,
   -1,   -1,  245,   -1,   -1,  248,   -1,   -1,  220,  105,
  106,   -1,  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  116,   -1,   -1,   -1,   -1,  316,  216,  217,   -1,   -1,
  321,   -1,   -1,   -1,  277,   -1,   -1,   -1,   -1,   -1,
   -1,  284,   -1,  286,   -1,   -1,   -1,   -1,   -1,  292,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  353,   -1,   -1,  356,   -1,  358,  258,  360,
   -1,  362,  363,  364,  365,   -1,  367,  173,  174,   -1,
  371,  213,  373,  257,  258,  259,  260,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,  233,   -1,   -1,   -1,   -1,   -1,   -1,  399,   -1,
  401,   -1,  403,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  411,  412,  413,  414,  220,  257,   -1,   -1,   -1,   -1,
  262,   -1,  264,   -1,  266,   -1,  268,  269,  270,  271,
   -1,   -1,   -1,  275,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  308,   -1,  310,   -1,
  312,   -1,   -1,   -1,   -1,   -1,  318,  319,  320,
};
}
final static short YYFINAL=10;
final static short YYMAXTOKEN=278;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,null,"';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"IGUAL","MAYOR_IGUAL","MENOR_IGUAL",
"DISTINTO","IF","THEN","ELSE","FOR","END_IF","OUT","FUNC","RETURN","LONGINT",
"FLOAT","ID","CTE","CADENA_MULT","PROC","VAR","NI","UP","DOWN",
};
final static String yyrule[] = {
"$accept : programa",
"programa : cuerpo",
"cuerpo : bloque_declarativo",
"cuerpo : bloque_ejecutable",
"cuerpo : bloque_declarativo bloque_ejecutable",
"cuerpo : error",
"bloque_declarativo : bloque_declarativo sentencia_declarativa",
"bloque_declarativo : sentencia_declarativa",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable",
"bloque_ejecutable : sentencia_ejecutable",
"bloque_sentencias : '{' lista_sentencias sentencia '}'",
"bloque_sentencias : sentencia",
"lista_sentencias : lista_sentencias sentencia",
"lista_sentencias : sentencia",
"sentencia : sentencia_ejecutable",
"sentencia : sentencia_declarativa",
"sentencia_declarativa : declaracion_variables",
"sentencia_declarativa : declaracion_procedimiento",
"sentencia_ejecutable : sentencia_seleccion",
"sentencia_ejecutable : sentencia_control",
"sentencia_ejecutable : sentencia_salida",
"sentencia_ejecutable : sentencia_asignacion",
"sentencia_ejecutable : sentencia_invocacion",
"declaracion_variables : tipo lista_variables ';'",
"declaracion_variables : tipo lista_variables error",
"declaracion_variables : tipo error ';'",
"lista_variables : ID ',' lista_variables",
"lista_variables : ID",
"lista_variables : ID lista_variables",
"tipo : LONGINT",
"tipo : FLOAT",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales ')' NI '=' cte '{' cuerpo '}'",
"declaracion_procedimiento : PROC ID '(' ')' NI '=' cte '{' cuerpo '}'",
"declaracion_procedimiento : ID '(' lista_parametros_formales ')' NI '=' cte '{' cuerpo '}'",
"declaracion_procedimiento : ID '(' ')' NI '=' cte '{' cuerpo '}'",
"declaracion_procedimiento : PROC '(' lista_parametros_formales ')' NI '=' cte '{' cuerpo '}'",
"declaracion_procedimiento : PROC '(' ')' NI '=' cte '{' cuerpo '}'",
"declaracion_procedimiento : PROC error '(' lista_parametros_formales ')' NI '=' cte '{' cuerpo '}'",
"declaracion_procedimiento : PROC error '(' ')' NI '=' cte '{' cuerpo '}'",
"declaracion_procedimiento : PROC ID error lista_parametros_formales ')' NI '=' cte '{' cuerpo '}'",
"declaracion_procedimiento : PROC ID error ')' NI '=' cte '{' cuerpo '}'",
"declaracion_procedimiento : PROC ID '(' error ')' NI '=' cte '{' cuerpo '}'",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales NI '=' cte '{' cuerpo '}'",
"declaracion_procedimiento : PROC ID '(' error NI '=' cte '{' cuerpo '}'",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales ')' error '=' cte '{' cuerpo '}'",
"declaracion_procedimiento : PROC ID '(' ')' error '=' cte '{' cuerpo '}'",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales ')' NI error cte '{' cuerpo '}'",
"declaracion_procedimiento : PROC ID '(' ')' NI error cte '{' cuerpo '}'",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales ')' NI '=' error '{' cuerpo '}'",
"declaracion_procedimiento : PROC ID '(' ')' NI '=' error '{' cuerpo '}'",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales ')' NI '=' cte cuerpo '}'",
"declaracion_procedimiento : PROC ID '(' ')' NI '=' cte cuerpo '}'",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales ')' NI '=' cte '{' '}'",
"declaracion_procedimiento : PROC ID '(' ')' NI '=' cte '{' '}'",
"lista_parametros_formales : parametro_formal ',' parametro_formal ',' parametro_formal",
"lista_parametros_formales : parametro_formal ',' parametro_formal",
"lista_parametros_formales : parametro_formal",
"lista_parametros_formales : parametro_formal parametro_formal ',' parametro_formal",
"lista_parametros_formales : parametro_formal ',' parametro_formal parametro_formal",
"lista_parametros_formales : parametro_formal parametro_formal",
"lista_parametros_formales : parametro_formal ',' parametro_formal ',' parametro_formal ',' error",
"lista_parametros_formales : parametro_formal ',' error",
"parametro_formal : tipo ID",
"parametro_formal : VAR tipo ID",
"parametro_formal : error ID",
"parametro_formal : VAR error ID",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias ELSE bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF condicion ')' THEN bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF condicion ')' THEN bloque_sentencias ELSE bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' ')' THEN bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' ')' THEN bloque_sentencias ELSE bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' error ')' THEN bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' error ')' THEN bloque_sentencias ELSE bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' condicion THEN bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' condicion THEN bloque_sentencias ELSE bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' error bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' error bloque_sentencias ELSE bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN ELSE bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN error END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN error ELSE bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias error ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias END_IF error",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias error",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias ELSE END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias ELSE error END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias ELSE bloque_sentencias error ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias ELSE bloque_sentencias END_IF error",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias ELSE bloque_sentencias error",
"sentencia_seleccion : IF '(' condicion ')' THEN ELSE END_IF error",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' sentencia_ejecutable",
"sentencia_control : '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' sentencia_ejecutable",
"sentencia_control : FOR error ID '=' CTE ';' condicion ';' incr_decr CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR error ID '=' CTE ';' condicion ';' incr_decr CTE ')' sentencia_ejecutable",
"sentencia_control : FOR '(' error '=' CTE ';' condicion ';' incr_decr CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' error '=' CTE ';' condicion ';' incr_decr CTE ')' sentencia_ejecutable",
"sentencia_control : FOR '(' ID error CTE ';' condicion ';' incr_decr CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID error CTE ';' condicion ';' incr_decr CTE ')' sentencia_ejecutable",
"sentencia_control : FOR '(' ID '=' error ';' condicion ';' incr_decr CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID '=' error ';' condicion ';' incr_decr CTE ')' sentencia_ejecutable",
"sentencia_control : FOR '(' ID '=' CTE error condicion ';' incr_decr CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID '=' CTE error condicion ';' incr_decr CTE ')' sentencia_ejecutable",
"sentencia_control : FOR '(' ID '=' CTE ';' error ';' incr_decr CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' error ';' incr_decr CTE ')' sentencia_ejecutable",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion incr_decr CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion incr_decr CTE ')' sentencia_ejecutable",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' error CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' error CTE ')' sentencia_ejecutable",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr error ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr error ')' sentencia_ejecutable",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE error '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE error sentencia_ejecutable",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' '{' error '}'",
"incr_decr : UP",
"incr_decr : DOWN",
"sentencia_salida : OUT '(' CADENA_MULT ')' ';'",
"sentencia_salida : error '(' CADENA_MULT ')' ';'",
"sentencia_salida : OUT error CADENA_MULT ')' ';'",
"sentencia_salida : OUT '(' ')' ';'",
"sentencia_salida : OUT '(' error ')' ';'",
"sentencia_salida : OUT '(' CADENA_MULT error ';'",
"sentencia_salida : OUT '(' CADENA_MULT ')'",
"sentencia_asignacion : ID '=' expresion ';'",
"sentencia_asignacion : error '=' expresion ';'",
"sentencia_asignacion : ID error expresion ';'",
"sentencia_asignacion : ID '=' error ';'",
"sentencia_asignacion : ID '=' expresion",
"sentencia_invocacion : ID '(' lista_parametros ')' ';'",
"sentencia_invocacion : ID '(' ')' ';'",
"sentencia_invocacion : '(' lista_parametros ')' ';'",
"sentencia_invocacion : '(' ')' ';'",
"sentencia_invocacion : ID lista_parametros ')' ';'",
"sentencia_invocacion : ID ')' ';'",
"sentencia_invocacion : ID '(' error ')' ';'",
"sentencia_invocacion : ID '(' lista_parametros error ';'",
"sentencia_invocacion : ID '(' error ';'",
"sentencia_invocacion : ID '(' lista_parametros ')'",
"sentencia_invocacion : ID '(' ')'",
"lista_parametros : parametro ',' parametro ',' parametro",
"lista_parametros : parametro ',' parametro",
"lista_parametros : parametro",
"lista_parametros : parametro ',' parametro ',' parametro ',' error",
"lista_parametros : parametro ',' error",
"lista_parametros : parametro parametro parametro",
"lista_parametros : parametro ',' parametro parametro",
"lista_parametros : parametro parametro ',' parametro",
"lista_parametros : parametro parametro",
"parametro : factor",
"condicion : expresion comparador expresion",
"condicion : expresion error expresion",
"condicion : expresion comparador error",
"condicion : error comparador expresion",
"comparador : MAYOR_IGUAL",
"comparador : MENOR_IGUAL",
"comparador : '>'",
"comparador : '<'",
"comparador : IGUAL",
"comparador : DISTINTO",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"expresion : expresion '+' error",
"expresion : expresion '-' error",
"expresion : error '+' termino",
"expresion : error '-' termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"termino : termino '*' error",
"termino : termino '/' error",
"termino : error '*' factor",
"termino : error '/' factor",
"factor : ID",
"factor : cte",
"cte : CTE",
"cte : '-' CTE",
};

//#line 277 "gramatica.y"

private AnalizadorLexico analizadorLexico;
private int nroUltimaLinea;

public Parser(AnalizadorLexico analizadorLexico, boolean debug){
	this.analizadorLexico = analizadorLexico;
	this.yydebug = debug;
}

private void yyerror(String mensaje){
	//System.out.println(Main.ANSI_RED + "ERROR | " + mensaje + Main.ANSI_RESET);
}

private int yylex(){
	return analizadorLexico.yylex();
}


public void checkRango(String cte, boolean negativo){
	Token token = TablaSimbolos.getToken(cte);
	String tipo = token.getTipoToken();

	if (tipo.equals("LONGINT")){
	    long entero = 0;
	    if (negativo) {
		if (Long.parseLong(cte) <= 2147483648L) {
		    entero = Long.parseLong(cte);
		} else {
		    System.out.printf(Main.ANSI_RED + "[Linea %d]- ERROR | Entero largo negativo fuera de rango: %s%n" + Main.ANSI_RESET, nroUltimaLinea, cte);
		}
		String nuevoLexema = "-" + entero;
		int cont = Integer.parseInt(TablaSimbolos.getToken(cte).getAtributo("contador")) - 1;
		//if (cont == 0)
		//  TablaSimbolos.remove(cte);
		//else
		  TablaSimbolos.getToken(cte).addAtributo("contador", String.valueOf(cont));
		if (!TablaSimbolos.existe(nuevoLexema)){
		    Token nuevoToken = new Token(token.getIdToken(), "LONGINT", nuevoLexema);
		    nuevoToken.addAtributo("contador", "1");
		    TablaSimbolos.add(nuevoToken);
		}
		else {
                     cont = Integer.parseInt(TablaSimbolos.getToken(nuevoLexema).getAtributo("contador")) + 1 ;
                     TablaSimbolos.getToken(nuevoLexema).addAtributo("contador", String.valueOf(cont));
                }
	    }
	    else{
		if (Long.parseLong(cte) > 2147483647L){
		    System.out.printf(Main.ANSI_RED + "[Linea %d]- ERROR | Entero largo positivo fuera de rango: %s%n" + Main.ANSI_RESET, nroUltimaLinea, cte);
		}
	    }
	}
	if (tipo.equals("FLOAT")) {
	    float flotante = 0;
	    if (negativo) {
		if ((1.17549435e-38f < Float.parseFloat(cte) && Float.parseFloat(cte) < 3.40282347e+38f)) {
		    flotante =  Float.parseFloat(cte);
		} else {
		    System.out.printf(Main.ANSI_RED + "[Linea %d]- ERROR | Flotante negativo fuera de rango: %s%n" + Main.ANSI_RESET, nroUltimaLinea, cte);
		}
		String nuevoLexema = "-" + flotante;
		int cont = Integer.parseInt(TablaSimbolos.getToken(cte).getAtributo("contador")) - 1;
		//if (cont == 0)
		//  TablaSimbolos.remove(cte);
		//else
		  TablaSimbolos.getToken(cte).addAtributo("contador", String.valueOf(cont));
		if (!TablaSimbolos.existe(nuevoLexema)){
		    Token nuevoToken = new Token(token.getIdToken(), "FLOAT", nuevoLexema);
		    nuevoToken.addAtributo("contador", "1");
		    TablaSimbolos.add(nuevoToken);
		}
		else {
                      cont = Integer.parseInt(TablaSimbolos.getToken(nuevoLexema).getAtributo("contador")) + 1 ;
                      TablaSimbolos.getToken(nuevoLexema).addAtributo("contador", String.valueOf(cont));
                }
	    }
	}
}
//#line 929 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        nroUltimaLinea = analizadorLexico.getNroLinea();
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 5:
//#line 35 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en bloque de sentencias. No se reconocen bloques dereclarativos/ejecutables %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 23:
//#line 69 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Declaración de variables %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 24:
//#line 70 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' " + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 25:
//#line 71 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta lista de variables " + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 28:
//#line 76 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' " + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 31:
//#line 83 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 32:
//#line 84 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 33:
//#line 85 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada PROC en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 34:
//#line 86 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada PROC en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 35:
//#line 87 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta definir el identificador en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 36:
//#line 88 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta definir el identificador en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 37:
//#line 89 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en el identificador en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 38:
//#line 90 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en el identificador en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 39:
//#line 91 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 40:
//#line 92 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 41:
//#line 93 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en la lista de parámetros formales en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 42:
//#line 94 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 43:
//#line 95 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 44:
//#line 96 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada NI en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 45:
//#line 97 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada NI en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 46:
//#line 98 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '=' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 47:
//#line 99 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '=' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 48:
//#line 100 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta constante NI en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 49:
//#line 101 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta constante NI en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 50:
//#line 102 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '{' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 51:
//#line 103 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '{' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 52:
//#line 104 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta bloque de sentencias en declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 53:
//#line 105 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta bloque de sentencias en declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 54:
//#line 110 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Lista de parámetros formales (3) %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 55:
//#line 111 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Lista de parámetros formales (2) %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 56:
//#line 112 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Lista de parámetros formales (1) %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 57:
//#line 113 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' entre los primeros dos parámetros formales %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 58:
//#line 114 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' entre los últimos dos parámetros formales %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 59:
//#line 115 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' entre los parámetros formales %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 60:
//#line 116 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Número de parámetros formales permitidos excedido %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 61:
//#line 117 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Parámetro formal incorrecto %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 62:
//#line 120 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Parámetro formal %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 63:
//#line 121 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Parámetro formal %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 64:
//#line 122 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta definir el tipo del parámetro formal %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 65:
//#line 123 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta definir el tipo del parámetro formal %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 66:
//#line 126 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 67:
//#line 127 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 68:
//#line 130 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 69:
//#line 131 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 70:
//#line 132 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta condición en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 71:
//#line 133 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta condición en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 72:
//#line 134 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en condición en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 73:
//#line 135 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en condición en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 74:
//#line 136 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 75:
//#line 137 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 76:
//#line 138 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada THEN en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 77:
//#line 139 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada THEN en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 78:
//#line 140 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta bloque de sentencias luego de THEN en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 79:
//#line 141 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta bloque de sentencias luego de THEN en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 80:
//#line 142 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en bloque de sentencias luego de THEN en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 81:
//#line 143 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en bloque de sentencias luego de THEN en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 82:
//#line 144 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada END_IF en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 83:
//#line 145 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 84:
//#line 146 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada END_IF y literal ';' en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 85:
//#line 147 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta bloque de sentencias luego de ELSE en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 86:
//#line 148 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en bloque de sentencias luego de ELSE en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 87:
//#line 149 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada END_IF en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 88:
//#line 150 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 89:
//#line 151 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada END_IF y literal ';' en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 90:
//#line 152 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Faltan bloques de sentencias luego de THEN y ELSE en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 91:
//#line 155 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de control FOR %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 92:
//#line 156 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de control FOR %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 93:
//#line 157 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada FOR en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 94:
//#line 158 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada FOR en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 95:
//#line 159 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 96:
//#line 160 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 97:
//#line 161 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta identificador de control en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 98:
//#line 162 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta identificador de control en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 99:
//#line 163 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '=' para inicializar identificador de control en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 100:
//#line 164 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '=' para inicializar identificador de control en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 101:
//#line 165 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta constante para inicializar identificador de control en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 102:
//#line 166 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta constante para inicializar identificador de control en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 103:
//#line 167 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' luego de expresión de inicialización en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 104:
//#line 168 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' luego de expresión de inicialización en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 105:
//#line 169 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta condición de control en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 106:
//#line 170 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta condición de control en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 107:
//#line 171 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' luego de condición de control en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 108:
//#line 172 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' luego de condición de control en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 109:
//#line 173 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta indicar incremento o decremento de la sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 110:
//#line 174 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta indicar incremento o decremento de la sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 111:
//#line 175 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta indicar constante de paso para incremento/decremento en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 112:
//#line 176 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta indicar constante de paso para incremento/decremento en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 113:
//#line 177 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 114:
//#line 178 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 115:
//#line 179 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en el cuerpo de la sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 118:
//#line 186 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de salida OUT %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 119:
//#line 187 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada OUT en sentencia de salida %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 120:
//#line 188 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de salida %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 121:
//#line 189 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta cadena multilínea a imprimir en sentencia de salida %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 122:
//#line 190 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en la cadena multilínea a imprimir en sentencia de salida %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 123:
//#line 191 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de salida %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 124:
//#line 192 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' en sentencia de salida %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 125:
//#line 195 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de asignación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 126:
//#line 196 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta lado izquierdo de la asignación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 127:
//#line 197 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '=' en sentencia de asignación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 128:
//#line 198 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta lado derecho de la asignación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 129:
//#line 199 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' al final de la asignación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 130:
//#line 202 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de invocación con lista de parámetros %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 131:
//#line 203 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de invocación sin parámetros %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 132:
//#line 204 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta el identificador del procedimiento a invocar %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 133:
//#line 205 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta el identificador del procedimiento a invocar %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 134:
//#line 206 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de invocación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 135:
//#line 207 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de invocación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 136:
//#line 208 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[Linea %d]- ERROR | Parámetros inválidos %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 137:
//#line 209 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de invocación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 138:
//#line 210 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[Linea %d]- ERROR | Falta literal ')' en sentencia de invocación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 139:
//#line 211 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[Linea %d]- ERROR | Falta literal ';' en sentencia de invocación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 140:
//#line 212 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[Linea %d]- ERROR | Falta literal ';' en sentencia de invocación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 141:
//#line 215 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Lista de parámetros (3) %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 142:
//#line 216 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Lista de parámetros (2) %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 143:
//#line 217 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Lista de parámetros (1) %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 144:
//#line 218 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Número de parámetros permitidos excedido %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 145:
//#line 219 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Parámetro incorrecto %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 146:
//#line 220 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Faltan literales ',' entre parámetros %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 147:
//#line 221 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' entre parámetros %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 148:
//#line 222 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' entre parámetros %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 149:
//#line 223 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' entre parámetros %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 151:
//#line 229 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Comparación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 152:
//#line 230 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta comparador %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 153:
//#line 231 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta el segundo operando de la condición %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 154:
//#line 232 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta el primer operando de la condición %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 157:
//#line 237 "gramatica.y"
{yyval = new ParserVal('>');}
break;
case 158:
//#line 238 "gramatica.y"
{yyval = new ParserVal('<');}
break;
case 161:
//#line 243 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Suma %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 162:
//#line 244 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Resta %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 164:
//#line 246 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[Linea %d]- ERROR | Falta el segundo operando en la suma %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 165:
//#line 247 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[Linea %d]- ERROR | Falta el segundo operando en la resta %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 166:
//#line 248 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[Linea %d]- ERROR | Falta el primer operando en la suma %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 167:
//#line 249 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[Linea %d]- ERROR | Falta el primer operando en la resta %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 168:
//#line 252 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Multiplicación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 169:
//#line 253 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: División %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 171:
//#line 255 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[Linea %d]- ERROR | Falta el segundo operando en la multiplicación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 172:
//#line 256 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[Linea %d]- ERROR | Falta el segundo operando en la división %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 173:
//#line 257 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[Linea %d]- ERROR | Falta el primer operando en la multiplicación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 174:
//#line 258 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[Linea %d]- ERROR | Falta el primer operando en la división %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 177:
//#line 265 "gramatica.y"
{String cte = val_peek(0).sval;
           checkRango(cte, false);
           }
break;
case 178:
//#line 268 "gramatica.y"
{ String cte = val_peek(0).sval;
      		  checkRango(cte, true);
      		  yyval = new ParserVal("-" + cte);
      		  String cte_nueva= "-"+cte;
      		  System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Constante negativa %s %n" + Main.ANSI_RESET, nroUltimaLinea, cte_nueva);
     	 	}
break;
//#line 1653 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
