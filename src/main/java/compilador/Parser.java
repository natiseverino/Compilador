//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
package compilador;
//#line 19 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
public static ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short IGUAL=257;
public final static short MAYOR_IGUAL=258;
public final static short MENOR_IGUAL=259;
public final static short DISTINTO=260;
public final static short IF=261;
public final static short THEN=262;
public final static short ELSE=263;
public final static short FOR=264;
public final static short END_IF=265;
public final static short OUT=266;
public final static short FUNC=267;
public final static short RETURN=268;
public final static short LONGINT=269;
public final static short FLOAT=270;
public final static short ID=271;
public final static short CTE=272;
public final static short CADENA_MULT=273;
public final static short PROC=274;
public final static short VAR=275;
public final static short NI=276;
public final static short UP=277;
public final static short DOWN=278;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    2,    2,    4,    4,    1,    1,    5,    5,    6,
    6,    3,    3,    3,    3,    3,    7,    7,    7,   15,
   15,   15,   14,   14,    8,    8,    8,    8,    8,    8,
    8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
    8,    8,    8,    8,    8,    8,    8,   16,   16,   16,
   16,   16,   16,   16,   16,   18,   18,   18,   18,    9,
    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
    9,    9,    9,    9,   10,   10,   10,   10,   10,   10,
   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
   10,   10,   10,   10,   10,   20,   20,   11,   11,   11,
   11,   11,   11,   11,   11,   12,   12,   12,   12,   12,
   13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
   13,   22,   22,   22,   22,   22,   22,   22,   22,   22,
   23,   19,   19,   19,   19,   25,   25,   25,   25,   25,
   25,   21,   21,   21,   21,   21,   21,   21,   26,   26,
   26,   26,   26,   26,   26,   24,   24,   17,   17,
};
final static short yylen[] = {                            2,
    1,    2,    1,    4,    1,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
    1,    2,    1,    1,   11,   10,   10,    9,   10,    9,
   11,   10,   11,   10,   11,   10,   10,   11,   10,   11,
   10,   11,   10,   10,    9,   10,    9,    5,    3,    1,
    4,    4,    2,    7,    3,    2,    3,    2,    3,    8,
   10,    7,    9,    7,    9,    8,   10,    7,    9,    8,
   10,    7,    9,    8,   10,    8,    8,    7,    9,   10,
   10,   10,    9,    8,   14,   12,   13,   11,   14,   12,
   14,   12,   14,   12,   14,   12,   14,   12,   14,   12,
   13,   11,   14,   12,   14,   12,   14,   12,   15,   15,
   14,   15,   16,   16,   12,    1,    1,    5,    5,    4,
    5,    4,    5,    5,    4,    4,    4,    4,    4,    3,
    5,    4,    4,    3,    4,    3,    5,    5,    4,    4,
    3,    5,    3,    1,    7,    3,    3,    4,    4,    2,
    1,    3,    3,    3,    3,    1,    1,    1,    1,    1,
    1,    3,    3,    1,    3,    3,    3,    3,    3,    3,
    1,    3,    3,    3,    3,    1,    1,    1,    2,
};
final static short yydefred[] = {                         0,
    0,    0,    0,    0,   23,   24,    0,    0,    0,    0,
    0,    8,    7,    9,   10,   11,   12,   13,   14,   15,
   16,    0,    0,    0,    0,  176,  178,    0,    0,  177,
    0,    0,  171,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  151,    0,    0,    0,    0,    0,
    0,    0,    6,    0,    0,    0,    0,    0,    0,  160,
  156,  157,  161,  158,  159,    0,    0,    0,    0,    0,
    0,    0,    0,  179,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  136,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  134,    0,   19,    0,   22,   18,   17,    0,  127,    0,
    0,    0,  174,  175,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  172,  169,  173,
  170,    0,    0,    0,    0,    0,    0,    0,    0,  122,
  128,   58,  139,    0,    0,    0,    0,  132,   56,    0,
    0,    0,    0,    0,  129,  126,  135,  146,    0,    0,
  147,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  120,  133,   20,  119,    0,    0,    0,    5,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  121,  123,
  124,  118,  137,   59,   57,    0,    0,    0,    0,    0,
  138,  131,    0,  148,  149,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   52,   51,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   64,    0,   68,    0,    0,    0,    0,    0,
    0,   72,    0,    0,    0,    0,   62,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   66,    4,    0,    0,
    0,   70,    0,   74,   84,    0,   76,    0,    0,    0,
   77,   60,    0,    0,    0,    0,    0,    0,    0,  116,
  117,    0,    0,    0,    0,    0,  145,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   65,   69,    0,
    0,   73,    0,   79,    0,    0,   63,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   28,    0,   54,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   47,    0,
   45,    0,    0,    0,    0,    0,    0,   30,    0,    0,
   67,   71,   75,   80,   81,   82,   61,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   27,   32,    0,
   34,    0,   37,    0,   39,   41,   43,   26,   36,    0,
    0,    0,   46,    0,   44,   29,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  102,
   31,   33,   35,   38,   40,   42,   25,    0,   88,    0,
   90,    0,   92,    0,   94,    0,   96,    0,   98,    0,
  100,    0,  104,    0,  106,    0,  108,    0,   86,  115,
    0,    0,    3,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  101,    2,   87,
   89,   91,   93,   95,   97,   99,  103,  105,  107,    0,
   85,    0,    0,  111,    0,    0,    0,    0,  110,  112,
  109,    0,  114,  113,    0,
};
final static short yydgoto[] = {                         10,
   11,  492,   12,  188,   13,   14,   15,   16,   17,   18,
   19,   20,   21,   22,   56,   94,   30,   95,   31,  343,
   32,   43,   44,   33,   70,   34,
};
final static short yysindex[] = {                       242,
   45,  500,   40,   51,    0,    0,  176,   63,    3,    0,
  242,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -211, -239,  -41, 1455,    0,    0,  147, -225,    0,
   18, 1460,    0,   66, -201, -147, -191,  -32,  -41,   75,
   73,  306,   99,   -4,    0,  112,   77,  153,  117,  160,
  161,  178,    0,  168,   -1,  -48,  286,  499,  140,    0,
    0,    0,    0,    0,    0,  602,  602,   53,   53,  -41,
 1547,  138,   15,    0,  146,  -41,  757,  789, 1090, 1189,
 1194,  193,  318,  -47,  355,  374,   16,  362,  159,  -38,
 -110,    2,  155,  402,  492,   64,    0,  137,  395,  387,
 1213,   32,  311,  335,  343,  187,  194,  438,  223,  440,
    0,  455,    0,  247,    0,    0,    0,  464,    0,  158,
   66,   66,    0,    0,  399,  266,  567,  567, -108,  567,
  399,  158,   66,  158,   66,  499,  399,    0,    0,    0,
    0,  257,  265,  267, -226,  474,  484,  488,  489,    0,
    0,    0,    0,  490,  279,  297,  510,    0,    0,  298,
 -141,  531,  517,  524,    0,    0,    0,    0,  127,   53,
    0,  308,  541,  309,  546,  -29, -227,  -31,  528,  316,
  535,    0,    0,    0,    0,  567,  242,  186,    0,  213,
  567,  523,  219,  549,  552,  555,  556,  -43,    0,    0,
    0,    0,    0,    0,    0,   -6,  548,  187,  680,  -63,
    0,    0,   53,    0,    0,  559,  340,  560,  341,  561,
  347,  563,  -34,  564, -149,   -6,  578, 1223,  228,  242,
  567,  584,  567,  585,  237,   78,  539,  592, -130,  567,
  593, 1223, 1223, 1223, 1223, 1223, 1256,  530,   -6,  -63,
    0,    0,  612,   -6,  600,   -6,  609,   -6,  610,   -6,
   -6,   86,   -6,  611,   81,  565,   -6,  616,  567,  630,
  566,  427,    0,  428,    0,  567,  635,  567,  636,  441,
  433,    0,  640,  550,  -42,  435,    0,  658,  659,  661,
  666,  667, 1411,   71,  242,  606,  686,  477,  619,   -6,
  620,   -6,  624,   -6,  629,  646,  650,  598,  651,   -6,
   -6,  145,  242,  652, -122,  469,    0,    0,  676,  694,
  511,    0,  512,    0,    0,  721,    0,   35,  723,  185,
    0,    0,  724, -122, -122, -122, -122, -122, -122,    0,
    0, -194,  513,  626,  242,  534,    0,  242,  668,  242,
  684,  242,  689,  242,  242,  242,  645,  656,  242,  699,
  704,  706,  614,  673,  242,  527,  737,    0,    0,  773,
  776,    0,  781,    0,  786,   13,    0,  572,  576,  577,
  581,  588,  589,  599, -198,  824,    0,  692,    0,  714,
  242,  726,  242,  738,  242,  761,  778,  803,    0,  815,
    0,  826,  242,  242,  242,  849,  868,    0,  891,  835,
    0,    0,    0,    0,    0,    0,    0,  838,  840,  850,
  852,  853,  857,  858,  861,  100,  837,    0,    0,  912,
    0,  928,    0,  958,    0,    0,    0,    0,    0,  974,
  986, 1003,    0, 1015,    0,    0,  892, 1054, 1067, 1081,
 1093, 1110, 1114, 1126, 1130, 1139,  939,  785,  586,    0,
    0,    0,    0,    0,    0,    0,    0,  586,    0,  586,
    0,  586,    0,  586,    0,  586,    0,  586,    0,  586,
    0,  586,    0,  586,    0,  586,    0,  242,    0,    0,
  456, 1087,    0, 1153, 1166, 1178, 1191, 1211, 1225, 1243,
 1273, 1274, 1286, 1026, 1287,   60,  797,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  136,
    0,  -99,   49,    0, 1300,  864,  780,  782,    0,    0,
    0,  411,    0,    0,  634,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  913,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   28,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  121,    0,    0,    0,    0,    9,    0,
    0,    0,    0,    0,   27,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  261,    0,    0,  -23,    0,    0,    0,  332,    0,
    0,  124,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   52,  104,    0,    0,  -39,    0,    0,    0,    0,    0,
  -28,  203,  295,  371,  445,  -26,  -22,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  394,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -19,    0,  413,    0,    0,    0,    0,  132,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  -18,  -17,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  134,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1038,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  475,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -16,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  494,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  261,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
 1228, 1132, 1340, 1467,   -5,  -33,    0,    0,    0,    0,
    0,    0,    0,  -40,  -20,   33, 1423,  -59, 1398, 1422,
  119,   -8, 1362,   -2,  886,  443,
};
final static int YYTABLESIZE=1865;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         93,
   52,  155,  154,   29,   45,   53,   45,   93,   88,  225,
  117,  221,  153,  145,  154,  247,  332,   50,  152,  155,
  153,   53,   55,   49,   48,  529,  262,  164,  222,  197,
  153,   96,  154,   57,  115,  162,  152,   45,   29,  101,
   29,   45,  114,   51,   54,  198,   74,   29,  223,  176,
  156,  167,  176,  176,   93,  129,  149,  425,   75,   55,
  158,  384,   93,   93,   93,  123,  124,  164,  164,   82,
  164,  417,  164,  426,   23,  170,   29,  139,  141,   36,
  108,   85,  340,  341,   23,   21,  164,  164,   23,  164,
   38,  167,  167,  184,  167,   24,  167,   29,   45,   45,
  154,  209,   48,  168,  164,   24,  264,   80,   83,   24,
  167,  167,   81,  167,  208,   92,  105,   23,  153,   29,
   93,  189,  189,   84,  189,  283,  265,    5,    6,  342,
   29,   97,  284,   91,  285,  173,  175,  178,   24,  100,
  457,  312,   59,  168,  168,  155,  168,  191,  168,  251,
  252,  103,  164,  192,  340,  341,  528,   89,    5,    6,
   99,  144,  168,  168,  150,  168,   45,   45,   93,   93,
  213,   29,  143,  530,  142,   23,  167,  109,   68,   66,
  189,   67,   77,   69,   78,  189,  189,   72,  125,   29,
  297,   29,  106,  107,  131,  165,   24,  137,  119,   68,
  110,   77,  165,   78,   69,    5,    6,  116,  144,   93,
   45,   91,  246,  331,   58,   40,   41,  151,  112,  111,
   29,  261,  155,   86,  271,  189,  113,  189,  168,   26,
   27,  189,  152,  153,  189,  154,   42,  155,  155,  152,
   87,  152,  165,  165,  224,  165,  220,  165,  153,  153,
  154,  154,   50,  142,  152,  152,   53,   55,   49,   48,
  141,  165,  165,  189,  165,   27,   26,   27,  416,   55,
  189,  148,  189,   49,   27,   50,  128,  157,  189,  176,
  176,    9,   21,  164,  164,  164,  164,  164,  164,  164,
  164,  164,  164,  164,  162,   35,  164,  164,  164,  373,
  141,  164,   26,   27,  164,  164,   37,  167,  167,  167,
  167,  167,  167,  167,  167,  167,  167,  167,   46,  163,
  167,  167,  167,   26,   27,  167,  118,  165,  167,  167,
   90,  130,  104,   47,  162,  162,  311,  162,   53,  162,
  278,  307,  279,    5,    6,   26,   27,  340,  341,   91,
   29,  172,   53,  162,  162,  456,  162,   27,   53,  168,
  168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
  166,  130,  168,  168,  168,  174,  144,  168,  143,  150,
  168,  168,   53,  177,   53,  141,   53,  143,   53,  142,
   53,   53,   53,  125,   53,  146,   53,   26,   27,  127,
  362,   53,   71,   53,    5,    6,  526,  130,  106,    8,
  166,  166,  140,  166,  147,  166,   27,   26,   27,  162,
  150,    5,    6,  490,   53,  159,   53,   91,   53,  166,
  166,   39,  166,  125,   53,   53,   53,   77,   53,   78,
  375,   77,  160,   78,  163,  167,   26,   27,  231,  376,
  232,  535,  140,  166,  505,   45,  130,  152,  165,  165,
  165,  165,  165,  165,  165,  165,  165,  165,  165,  179,
  522,  165,  165,  165,   78,  233,  165,  234,  180,  165,
  165,  240,   96,  241,  163,  163,  527,  163,   45,  163,
  269,   93,  270,   83,  181,  166,  507,    1,  182,  276,
   29,  277,    2,  163,  163,    3,  163,    4,  121,  122,
    5,    6,    7,  183,   78,    8,  141,   55,  125,  133,
  135,  141,  185,  141,  141,  141,  141,  186,  194,  141,
  141,  141,  199,   83,  141,  161,  195,  140,  196,   28,
   68,   66,  200,   67,   29,   69,  201,  202,  203,  204,
  162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
  162,   98,    9,  162,  162,  162,  106,  205,  162,  163,
  206,  162,  162,  207,  210,  211,   26,   27,    9,    5,
    6,  217,  212,  216,  218,   91,  219,  130,  226,    9,
  106,  227,  130,  228,  130,  130,  130,  130,  176,   78,
  130,  130,  130,    5,    6,  130,    9,  242,  249,   91,
  243,    5,    6,  244,  245,  255,  257,   91,   83,  254,
  256,  258,  259,  260,  263,    9,  166,  166,  166,  166,
  166,  166,  166,  166,  166,  166,  166,    9,  267,  166,
  166,  166,  273,  275,  166,  187,   29,  166,  166,  125,
  282,  287,  295,    9,  125,  298,  125,  125,  125,  125,
  300,  187,  125,  125,  125,    9,  106,  125,  140,  302,
  304,  310,  187,  140,  315,  140,  140,  140,  140,    5,
    6,  140,  140,  140,    9,   91,  140,  313,  317,  187,
  318,  319,  320,  322,  324,    9,  325,  326,  327,  333,
  163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
  163,  506,    9,  163,  163,  163,  334,  335,  163,  336,
  357,  163,  163,  250,  337,  338,   26,   27,  345,  346,
   78,    9,  347,  367,  368,   78,  406,   78,   78,   78,
   78,  348,  350,   78,   78,   78,  352,  106,   78,   83,
  387,  354,  369,    9,   83,   25,   83,   83,   83,   83,
    5,    6,   83,   83,   83,    9,   91,   83,  355,  399,
   26,   27,  356,  359,  365,  370,  371,    9,  236,  372,
  401,  374,  377,    2,  386,  237,    3,  238,    4,  389,
  391,    5,    6,    7,    1,  411,    8,  408,  410,    2,
    9,   29,    3,  280,    4,  328,  393,    5,    6,    7,
    2,  395,    8,    3,  329,    4,  428,    9,    5,    6,
    7,  403,    1,    8,  491,   41,  404,    2,  405,   29,
    3,  412,    4,   29,  413,    5,    6,    7,  429,  414,
    8,    1,    9,  418,  415,   42,    2,  419,  420,    3,
  431,    4,  421,    1,    9,  158,  458,  120,    2,  422,
  423,    3,  433,    4,  427,    9,    5,    6,    7,    1,
  424,    8,   26,   27,    2,  447,    9,    3,  448,    4,
  449,    1,    5,    6,    7,  435,    2,    8,    9,    3,
  450,    4,  451,  452,    5,    6,    7,  453,  454,    8,
    1,  455,  436,  532,  533,    2,  534,    9,    3,  157,
    4,    1,    1,    5,    6,    7,    2,   79,    8,    3,
    0,    4,    0,    0,    5,    6,    7,  437,    1,    8,
    9,    9,    0,    2,    0,  106,    3,    0,    4,  438,
    0,    5,    6,    7,    0,    0,    8,    1,    5,    6,
  439,    9,    2,    0,   91,    3,    0,    4,    0,  459,
    5,    6,    7,    0,    0,    8,    0,    9,    0,    1,
    0,    0,    0,  443,    2,    0,    0,    3,    9,    4,
    0,    1,    5,    6,    7,    0,    2,    8,    0,    3,
    0,    4,  445,    1,    5,    6,    7,    9,    2,    8,
    0,    3,    0,    4,    0,    0,    5,    6,    7,    0,
    0,    8,  132,    9,  468,  446,    1,    0,    0,    0,
    0,    2,    0,    0,    3,    9,    4,   26,   27,    5,
    6,    7,    0,    1,    8,    0,  461,    0,    2,    0,
   39,    3,    9,    4,  134,    0,    5,    6,    7,    0,
    0,    8,  462,    0,    9,   26,   27,    0,    1,   26,
   27,  488,    0,    2,    0,    9,    3,    0,    4,    0,
    1,    5,    6,    7,    0,    2,    8,    6,    3,    0,
    4,    1,  463,    5,    6,    7,    2,    0,    8,    3,
    0,    4,    1,    9,    5,    6,    7,    2,  464,    8,
    3,    0,    4,    0,    1,    0,    9,  458,    0,    2,
  465,    0,    3,    0,    4,    0,    0,    5,    6,    7,
    9,    0,    8,    1,    0,    0,    9,  466,    2,    0,
    0,    3,    9,    4,   29,    0,    5,    6,    7,  467,
    0,    8,    0,    0,    0,    0,    1,    1,    0,    9,
  521,    2,    2,    9,    3,    3,    4,    4,    0,    5,
    6,    7,  458,    0,    8,    9,    0,    1,    0,    9,
    0,    0,    2,    0,    0,    3,  470,    4,    9,    0,
    5,    6,    7,    1,    0,    8,    0,    0,    2,  472,
    0,    3,    9,    4,    1,    0,    5,    6,    7,    2,
    0,    8,    3,  474,    4,    9,    0,    5,    6,    7,
    0,  508,    8,    1,    0,  476,    0,    9,    2,    0,
    0,    3,    0,    4,    0,    0,    5,    6,    7,    1,
    9,    8,  478,   29,    2,    0,  480,    3,   29,    4,
    0,    1,    5,    6,    7,    0,    2,    8,  482,    3,
    9,    4,  484,    0,    5,    6,    7,   29,    1,    8,
    0,  486,    0,    2,    9,    0,    3,   29,    4,    0,
    1,    5,    6,    7,    0,    2,    8,  510,    3,    0,
    4,  520,    9,    5,    6,    7,    2,    0,    8,    3,
  511,    4,    0,    6,    5,    6,    7,    0,    6,    8,
   29,    6,  512,    6,    0,    0,    6,    6,    6,    1,
    0,    6,    9,    9,    2,  513,    0,    3,    0,    4,
    0,    0,    1,    0,  458,    9,    9,    2,    0,    0,
    3,    0,    4,    0,    0,  514,    1,  458,    0,    9,
    0,    2,    1,    0,    3,  136,    4,    2,    1,  515,
    3,  458,    4,    2,    0,    0,    3,  458,    4,    0,
   26,   27,    0,  458,    0,    1,    0,  516,    0,    1,
    2,    0,    0,    3,    2,    4,    0,    3,    0,    4,
  458,    1,    0,    0,  458,    1,    2,    0,    0,    3,
    2,    4,    0,    3,    1,    4,  458,  517,  518,    2,
  458,    0,    3,    0,    4,  102,    0,    0,    1,  458,
  519,  524,    0,    2,  230,    0,    3,    0,    4,    0,
    0,    1,    0,  458,  531,   73,    2,    0,    0,    3,
    0,    4,    0,    1,    0,    0,  458,    0,    2,    0,
    0,    3,    0,    4,  138,    0,    1,    0,  458,  140,
    0,    2,   68,   66,    3,   67,    4,   69,    0,   26,
   27,  458,  169,  171,   26,   27,    1,    0,  168,  339,
   65,    2,   64,    0,    3,    0,    4,    0,   25,    0,
    1,  458,    0,   26,   27,    2,    0,    0,    3,    0,
    4,    0,    0,   26,   27,  458,   68,   66,    1,   67,
    0,   69,   77,    2,   78,    0,    3,    0,    4,    0,
    0,  293,    0,  458,   65,    0,   64,    0,    0,   65,
    0,   64,  344,    0,    0,    0,   26,   27,    1,    1,
  214,  215,    0,    2,    2,  358,    3,    3,    4,    4,
  364,    1,  523,  458,  458,    0,    2,    2,    0,    3,
    3,    4,    4,    0,    0,    1,  458,  458,    0,    0,
    2,    0,    0,    3,    0,    4,    0,    0,    0,    0,
  458,    0,  388,    0,  253,  390,    0,  392,    0,  394,
    0,  396,  397,  398,  400,    0,  402,  126,   68,   66,
  407,   67,  409,   69,  190,    0,  193,    0,    0,  494,
    0,  495,    0,  496,    0,  497,   65,  498,   64,  499,
    0,  500,    0,  501,    0,  502,    0,  503,  430,  504,
  432,    0,  434,    0,    0,  268,    0,    0,  248,    0,
  440,  441,  442,  444,    0,    0,  525,    0,    0,  288,
  289,  290,  291,  292,  294,    0,    0,    0,  266,    0,
    0,    0,  229,    0,    0,    0,    0,  235,  239,    0,
    0,    0,    0,    0,    0,    0,    0,   60,   61,   62,
   63,  296,    0,    0,    0,    0,  299,    0,  301,    0,
  303,    0,  305,  306,  308,  309,    0,    0,    0,  314,
    0,    0,    0,    0,    0,    0,    0,  272,    0,  274,
    0,    0,    0,  281,    0,    0,  286,    0,    0,    0,
    0,   60,   61,   62,   63,   76,   60,   61,   62,   63,
    0,    0,  349,    0,  351,    0,  353,    0,    0,    0,
    0,    0,  360,  361,  363,  316,  366,    0,    0,    0,
    0,    0,  321,    0,  323,    0,    0,    0,    0,    0,
  330,    0,    0,    0,    0,  378,  379,  380,  381,  382,
  383,    0,    0,  385,    0,    0,  460,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  469,  471,  473,  475,
  477,  479,  481,  483,  485,  487,  489,    0,  493,    0,
    0,    0,    0,   60,   61,   62,   63,  493,    0,  493,
    0,  493,    0,  493,    0,  493,    0,  493,    0,  493,
    0,  493,    0,  493,    0,  493,    0,  493,    0,    0,
    0,  509,    0,  509,  509,  509,  509,  509,  509,  509,
  509,  509,  509,  509,  493,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  509,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         40,
    9,   41,   41,   45,    7,   11,    9,   48,   41,   41,
   59,   41,   41,   61,   41,   59,   59,   41,   41,   59,
   59,   41,   41,   41,   41,  125,   61,    0,  256,  256,
   59,   40,   59,  273,   55,   95,   59,   40,   45,   44,
   45,   44,   44,   41,  256,  272,  272,   45,  276,   41,
   91,    0,   44,   45,   95,   41,   41,  256,   41,  271,
   59,  256,  103,  104,  105,   68,   69,   40,   41,  271,
   43,   59,   45,  272,   40,   44,   45,   80,   81,   40,
   48,  273,  277,  278,   40,   59,   59,   60,   40,   62,
   40,   40,   41,  114,   43,   61,   45,   45,  101,  102,
   41,  161,   40,    0,   41,   61,  256,   42,  256,   61,
   59,   60,   47,   62,  256,   41,   40,   40,   59,   45,
  161,  127,  128,  271,  130,  256,  276,  269,  270,   59,
   45,   59,  263,  275,  265,  103,  104,  105,   61,   41,
   41,   61,   24,   40,   41,  256,   43,  256,   45,  209,
  210,   40,  125,  262,  277,  278,  256,   39,  269,  270,
   42,   41,   59,   60,   41,   62,  169,  170,  209,  210,
   44,   45,   41,  125,   41,   40,  125,   61,   42,   43,
  186,   45,   43,   47,   45,  191,  192,   41,   70,   45,
  250,   45,  256,   41,   76,   59,   61,   79,   59,   42,
   41,   43,    0,   45,   47,  269,  270,  256,  256,  250,
  213,  275,  256,  256,  256,   40,   41,   59,   41,   59,
   45,  256,  262,  256,  230,  231,   59,  233,  125,  271,
  272,  237,  271,  262,  240,  262,   61,  277,  278,  262,
  273,  271,   40,   41,  276,   43,  276,   45,  277,  278,
  277,  278,  276,   61,  277,  278,  276,  276,  276,  276,
    0,   59,   60,  269,   62,  272,  271,  272,  256,  271,
  276,  256,  278,  271,  272,  273,  262,  276,  284,  271,
  272,   40,  256,  256,  257,  258,  259,  260,  261,  262,
  263,  264,  265,  266,    0,  256,  269,  270,  271,  265,
   40,  274,  271,  272,  277,  278,  256,  256,  257,  258,
  259,  260,  261,  262,  263,  264,  265,  266,  256,  256,
  269,  270,  271,  271,  272,  274,   41,  125,  277,  278,
  256,    0,  256,  271,   40,   41,  256,   43,  344,   45,
  263,  256,  265,  269,  270,  271,  272,  277,  278,  275,
   45,   41,  358,   59,   60,  256,   62,  272,  364,  256,
  257,  258,  259,  260,  261,  262,  263,  264,  265,  266,
    0,   40,  269,  270,  271,   41,  256,  274,   61,  256,
  277,  278,  388,   41,  390,  125,  392,  256,  394,  256,
  396,  397,  398,    0,  400,   41,  402,  271,  272,  262,
  256,  407,  256,  409,  269,  270,  271,  262,  256,  274,
   40,   41,    0,   43,   41,   45,  272,  271,  272,  125,
   59,  269,  270,  457,  430,  271,  432,  275,  434,   59,
   60,  256,   62,   40,  440,  441,  442,   43,  444,   45,
  256,   43,   41,   45,    0,   59,  271,  272,  263,  265,
  265,   41,   40,   59,  488,  458,  125,  271,  256,  257,
  258,  259,  260,  261,  262,  263,  264,  265,  266,  276,
  504,  269,  270,  271,    0,  263,  274,  265,   41,  277,
  278,  263,  491,  265,   40,   41,  520,   43,  491,   45,
  263,  532,  265,    0,  272,  125,   41,  256,   59,  263,
   45,  265,  261,   59,   60,  264,   62,  266,   66,   67,
  269,  270,  271,   59,   40,  274,  256,  271,  125,   77,
   78,  261,   59,  263,  264,  265,  266,  262,  272,  269,
  270,  271,   59,   40,  274,   44,  272,  125,  272,   40,
   42,   43,   59,   45,   45,   47,   59,   59,   59,  271,
  256,  257,  258,  259,  260,  261,  262,  263,  264,  265,
  266,  256,   40,  269,  270,  271,  256,  271,  274,  125,
   61,  277,  278,  276,   44,   59,  271,  272,   40,  269,
  270,   41,   59,  276,  276,  275,   41,  256,   61,   40,
  256,  276,  261,   59,  263,  264,  265,  266,  256,  125,
  269,  270,  271,  269,  270,  274,   40,   59,   61,  275,
   59,  269,  270,   59,   59,  276,  276,  275,  125,   61,
   61,   61,  276,   61,   61,   40,  256,  257,  258,  259,
  260,  261,  262,  263,  264,  265,  266,   40,   61,  269,
  270,  271,   59,   59,  274,  123,   45,  277,  278,  256,
   59,   59,  123,   40,  261,   44,  263,  264,  265,  266,
   61,  123,  269,  270,  271,   40,  256,  274,  256,   61,
   61,   61,  123,  261,   59,  263,  264,  265,  266,  269,
  270,  269,  270,  271,   40,  275,  274,  123,   59,  123,
  125,  265,  265,   59,   59,   40,  256,  265,   59,  265,
  256,  257,  258,  259,  260,  261,  262,  263,  264,  265,
  266,  256,   40,  269,  270,  271,   59,   59,  274,   59,
  123,  277,  278,   44,   59,   59,  271,  272,  123,   44,
  256,   40,  256,  265,   59,  261,  123,  263,  264,  265,
  266,  123,  123,  269,  270,  271,  123,  256,  274,  256,
  125,  123,   59,   40,  261,  256,  263,  264,  265,  266,
  269,  270,  269,  270,  271,   40,  275,  274,  123,  125,
  271,  272,  123,  123,  123,  265,  265,   40,  256,   59,
  125,   59,   59,  261,  272,  263,  264,  265,  266,  256,
  123,  269,  270,  271,  256,   59,  274,  125,  272,  261,
   40,   45,  264,  265,  266,  256,  123,  269,  270,  271,
  261,  123,  274,  264,  265,  266,  125,   40,  269,  270,
  271,  123,  256,  274,   40,   41,  123,  261,  123,   45,
  264,   59,  266,   45,   59,  269,  270,  271,  125,   59,
  274,  256,   40,  272,   59,   61,  261,  272,  272,  264,
  125,  266,  272,  256,   40,   59,  271,  256,  261,  272,
  272,  264,  125,  266,   41,   40,  269,  270,  271,  256,
  272,  274,  271,  272,  261,   41,   40,  264,   41,  266,
   41,  256,  269,  270,  271,  125,  261,  274,   40,  264,
   41,  266,   41,   41,  269,  270,  271,   41,   41,  274,
  256,   41,  125,   40,  125,  261,  125,   40,  264,  276,
  266,  256,    0,  269,  270,  271,  261,   32,  274,  264,
   -1,  266,   -1,   -1,  269,  270,  271,  125,  256,  274,
   40,   40,   -1,  261,   -1,  256,  264,   -1,  266,  125,
   -1,  269,  270,  271,   -1,   -1,  274,  256,  269,  270,
  125,   40,  261,   -1,  275,  264,   -1,  266,   -1,  123,
  269,  270,  271,   -1,   -1,  274,   -1,   40,   -1,  256,
   -1,   -1,   -1,  125,  261,   -1,   -1,  264,   40,  266,
   -1,  256,  269,  270,  271,   -1,  261,  274,   -1,  264,
   -1,  266,  125,  256,  269,  270,  271,   40,  261,  274,
   -1,  264,   -1,  266,   -1,   -1,  269,  270,  271,   -1,
   -1,  274,  256,   40,  123,  125,  256,   -1,   -1,   -1,
   -1,  261,   -1,   -1,  264,   40,  266,  271,  272,  269,
  270,  271,   -1,  256,  274,   -1,  125,   -1,  261,   -1,
  256,  264,   40,  266,  256,   -1,  269,  270,  271,   -1,
   -1,  274,  125,   -1,   40,  271,  272,   -1,  256,  271,
  272,  123,   -1,  261,   -1,   40,  264,   -1,  266,   -1,
  256,  269,  270,  271,   -1,  261,  274,   40,  264,   -1,
  266,  256,  125,  269,  270,  271,  261,   -1,  274,  264,
   -1,  266,  256,   40,  269,  270,  271,  261,  125,  274,
  264,   -1,  266,   -1,  256,   -1,   40,  271,   -1,  261,
  125,   -1,  264,   -1,  266,   -1,   -1,  269,  270,  271,
   40,   -1,  274,  256,   -1,   -1,   40,  125,  261,   -1,
   -1,  264,   40,  266,   45,   -1,  269,  270,  271,  125,
   -1,  274,   -1,   -1,   -1,   -1,  256,  256,   -1,   40,
  125,  261,  261,   40,  264,  264,  266,  266,   -1,  269,
  270,  271,  271,   -1,  274,   40,   -1,  256,   -1,   40,
   -1,   -1,  261,   -1,   -1,  264,  123,  266,   40,   -1,
  269,  270,  271,  256,   -1,  274,   -1,   -1,  261,  123,
   -1,  264,   40,  266,  256,   -1,  269,  270,  271,  261,
   -1,  274,  264,  123,  266,   40,   -1,  269,  270,  271,
   -1,  125,  274,  256,   -1,  123,   -1,   40,  261,   -1,
   -1,  264,   -1,  266,   -1,   -1,  269,  270,  271,  256,
   40,  274,  123,   45,  261,   -1,  123,  264,   45,  266,
   -1,  256,  269,  270,  271,   -1,  261,  274,  123,  264,
   40,  266,  123,   -1,  269,  270,  271,   45,  256,  274,
   -1,  123,   -1,  261,   40,   -1,  264,   45,  266,   -1,
  256,  269,  270,  271,   -1,  261,  274,  125,  264,   -1,
  266,  256,   40,  269,  270,  271,  261,   -1,  274,  264,
  125,  266,   -1,  256,  269,  270,  271,   -1,  261,  274,
   45,  264,  125,  266,   -1,   -1,  269,  270,  271,  256,
   -1,  274,   40,   40,  261,  125,   -1,  264,   -1,  266,
   -1,   -1,  256,   -1,  271,   40,   40,  261,   -1,   -1,
  264,   -1,  266,   -1,   -1,  125,  256,  271,   -1,   40,
   -1,  261,  256,   -1,  264,  256,  266,  261,  256,  125,
  264,  271,  266,  261,   -1,   -1,  264,  271,  266,   -1,
  271,  272,   -1,  271,   -1,  256,   -1,  125,   -1,  256,
  261,   -1,   -1,  264,  261,  266,   -1,  264,   -1,  266,
  271,  256,   -1,   -1,  271,  256,  261,   -1,   -1,  264,
  261,  266,   -1,  264,  256,  266,  271,  125,  125,  261,
  271,   -1,  264,   -1,  266,   44,   -1,   -1,  256,  271,
  125,  125,   -1,  261,  187,   -1,  264,   -1,  266,   -1,
   -1,  256,   -1,  271,  125,   28,  261,   -1,   -1,  264,
   -1,  266,   -1,  256,   -1,   -1,  271,   -1,  261,   -1,
   -1,  264,   -1,  266,  256,   -1,  256,   -1,  271,  256,
   -1,  261,   42,   43,  264,   45,  266,   47,   -1,  271,
  272,  271,  101,  102,  271,  272,  256,   -1,  256,   59,
   60,  261,   62,   -1,  264,   -1,  266,   -1,  256,   -1,
  256,  271,   -1,  271,  272,  261,   -1,   -1,  264,   -1,
  266,   -1,   -1,  271,  272,  271,   42,   43,  256,   45,
   -1,   47,   43,  261,   45,   -1,  264,   -1,  266,   -1,
   -1,  256,   -1,  271,   60,   -1,   62,   -1,   -1,   60,
   -1,   62,  295,   -1,   -1,   -1,  271,  272,  256,  256,
  169,  170,   -1,  261,  261,  308,  264,  264,  266,  266,
  313,  256,  256,  271,  271,   -1,  261,  261,   -1,  264,
  264,  266,  266,   -1,   -1,  256,  271,  271,   -1,   -1,
  261,   -1,   -1,  264,   -1,  266,   -1,   -1,   -1,   -1,
  271,   -1,  345,   -1,  213,  348,   -1,  350,   -1,  352,
   -1,  354,  355,  356,  357,   -1,  359,   41,   42,   43,
  363,   45,  365,   47,  128,   -1,  130,   -1,   -1,  468,
   -1,  470,   -1,  472,   -1,  474,   60,  476,   62,  478,
   -1,  480,   -1,  482,   -1,  484,   -1,  486,  391,  488,
  393,   -1,  395,   -1,   -1,  228,   -1,   -1,  206,   -1,
  403,  404,  405,  406,   -1,   -1,  505,   -1,   -1,  242,
  243,  244,  245,  246,  247,   -1,   -1,   -1,  226,   -1,
   -1,   -1,  186,   -1,   -1,   -1,   -1,  191,  192,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,  249,   -1,   -1,   -1,   -1,  254,   -1,  256,   -1,
  258,   -1,  260,  261,  262,  263,   -1,   -1,   -1,  267,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  231,   -1,  233,
   -1,   -1,   -1,  237,   -1,   -1,  240,   -1,   -1,   -1,
   -1,  257,  258,  259,  260,  256,  257,  258,  259,  260,
   -1,   -1,  300,   -1,  302,   -1,  304,   -1,   -1,   -1,
   -1,   -1,  310,  311,  312,  269,  315,   -1,   -1,   -1,
   -1,   -1,  276,   -1,  278,   -1,   -1,   -1,   -1,   -1,
  284,   -1,   -1,   -1,   -1,  334,  335,  336,  337,  338,
  339,   -1,   -1,  342,   -1,   -1,  427,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  447,  448,  449,  450,
  451,  452,  453,  454,  455,  456,  457,   -1,  459,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,  468,   -1,  470,
   -1,  472,   -1,  474,   -1,  476,   -1,  478,   -1,  480,
   -1,  482,   -1,  484,   -1,  486,   -1,  488,   -1,   -1,
   -1,  492,   -1,  494,  495,  496,  497,  498,  499,  500,
  501,  502,  503,  504,  505,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  525,
};
}
final static short YYFINAL=10;
final static short YYMAXTOKEN=278;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,null,"';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"IGUAL","MAYOR_IGUAL","MENOR_IGUAL",
"DISTINTO","IF","THEN","ELSE","FOR","END_IF","OUT","FUNC","RETURN","LONGINT",
"FLOAT","ID","CTE","CADENA_MULT","PROC","VAR","NI","UP","DOWN",
};
final static String yyrule[] = {
"$accept : programa",
"programa : lista_sentencias",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable",
"bloque_ejecutable : sentencia_ejecutable",
"bloque_sentencias : '{' lista_sentencias sentencia '}'",
"bloque_sentencias : sentencia",
"lista_sentencias : lista_sentencias sentencia",
"lista_sentencias : sentencia",
"sentencia : sentencia_ejecutable",
"sentencia : sentencia_declarativa",
"sentencia_declarativa : declaracion_variables",
"sentencia_declarativa : declaracion_procedimiento",
"sentencia_ejecutable : sentencia_seleccion",
"sentencia_ejecutable : sentencia_control",
"sentencia_ejecutable : sentencia_salida",
"sentencia_ejecutable : sentencia_asignacion",
"sentencia_ejecutable : sentencia_invocacion",
"declaracion_variables : tipo lista_variables ';'",
"declaracion_variables : tipo lista_variables error",
"declaracion_variables : tipo error ';'",
"lista_variables : ID ',' lista_variables",
"lista_variables : ID",
"lista_variables : ID lista_variables",
"tipo : LONGINT",
"tipo : FLOAT",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales ')' NI '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' ')' NI '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : ID '(' lista_parametros_formales ')' NI '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : ID '(' ')' NI '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC '(' lista_parametros_formales ')' NI '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC '(' ')' NI '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC error '(' lista_parametros_formales ')' NI '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC error '(' ')' NI '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID error lista_parametros_formales ')' NI '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID error ')' NI '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' error ')' NI '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales NI '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' error NI '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales ')' error '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' ')' error '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales ')' NI error cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' ')' NI error cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales ')' NI '=' error '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' ')' NI '=' error '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales ')' NI '=' cte lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' ')' NI '=' cte lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales ')' NI '=' cte '{' '}'",
"declaracion_procedimiento : PROC ID '(' ')' NI '=' cte '{' '}'",
"lista_parametros_formales : parametro_formal ',' parametro_formal ',' parametro_formal",
"lista_parametros_formales : parametro_formal ',' parametro_formal",
"lista_parametros_formales : parametro_formal",
"lista_parametros_formales : parametro_formal parametro_formal ',' parametro_formal",
"lista_parametros_formales : parametro_formal ',' parametro_formal parametro_formal",
"lista_parametros_formales : parametro_formal parametro_formal",
"lista_parametros_formales : parametro_formal ',' parametro_formal ',' parametro_formal ',' error",
"lista_parametros_formales : parametro_formal ',' error",
"parametro_formal : tipo ID",
"parametro_formal : VAR tipo ID",
"parametro_formal : error ID",
"parametro_formal : VAR error ID",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias ELSE bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF condicion ')' THEN bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF condicion ')' THEN bloque_sentencias ELSE bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' ')' THEN bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' ')' THEN bloque_sentencias ELSE bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' error ')' THEN bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' error ')' THEN bloque_sentencias ELSE bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' condicion THEN bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' condicion THEN bloque_sentencias ELSE bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' error bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' error bloque_sentencias ELSE bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN ELSE bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN error END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN error ELSE bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias error ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias END_IF error",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias error",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias ELSE END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias ELSE error END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias ELSE bloque_sentencias error ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias ELSE bloque_sentencias END_IF error",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias ELSE bloque_sentencias error",
"sentencia_seleccion : IF '(' condicion ')' THEN ELSE END_IF error",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' sentencia_ejecutable",
"sentencia_control : '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' sentencia_ejecutable",
"sentencia_control : FOR error ID '=' CTE ';' condicion ';' incr_decr CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR error ID '=' CTE ';' condicion ';' incr_decr CTE ')' sentencia_ejecutable",
"sentencia_control : FOR '(' error '=' CTE ';' condicion ';' incr_decr CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' error '=' CTE ';' condicion ';' incr_decr CTE ')' sentencia_ejecutable",
"sentencia_control : FOR '(' ID error CTE ';' condicion ';' incr_decr CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID error CTE ';' condicion ';' incr_decr CTE ')' sentencia_ejecutable",
"sentencia_control : FOR '(' ID '=' error ';' condicion ';' incr_decr CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID '=' error ';' condicion ';' incr_decr CTE ')' sentencia_ejecutable",
"sentencia_control : FOR '(' ID '=' CTE error condicion ';' incr_decr CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID '=' CTE error condicion ';' incr_decr CTE ')' sentencia_ejecutable",
"sentencia_control : FOR '(' ID '=' CTE ';' error ';' incr_decr CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' error ';' incr_decr CTE ')' sentencia_ejecutable",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion incr_decr CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion incr_decr CTE ')' sentencia_ejecutable",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' error CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' error CTE ')' sentencia_ejecutable",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr error ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr error ')' sentencia_ejecutable",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE error '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE error sentencia_ejecutable",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' '{' sentencia_declarativa bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' '{' bloque_ejecutable sentencia_declarativa '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' '{' sentencia_declarativa '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' '{' sentencia_declarativa error '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' '{' bloque_ejecutable sentencia_declarativa error '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' '{' bloque_ejecutable error sentencia_declarativa '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' sentencia_declarativa",
"incr_decr : UP",
"incr_decr : DOWN",
"sentencia_salida : OUT '(' CADENA_MULT ')' ';'",
"sentencia_salida : error '(' CADENA_MULT ')' ';'",
"sentencia_salida : '(' CADENA_MULT ')' ';'",
"sentencia_salida : OUT error CADENA_MULT ')' ';'",
"sentencia_salida : OUT '(' ')' ';'",
"sentencia_salida : OUT '(' error ')' ';'",
"sentencia_salida : OUT '(' CADENA_MULT error ';'",
"sentencia_salida : OUT '(' CADENA_MULT ')'",
"sentencia_asignacion : ID '=' expresion ';'",
"sentencia_asignacion : error '=' expresion ';'",
"sentencia_asignacion : ID error expresion ';'",
"sentencia_asignacion : ID '=' error ';'",
"sentencia_asignacion : ID '=' expresion",
"sentencia_invocacion : ID '(' lista_parametros ')' ';'",
"sentencia_invocacion : ID '(' ')' ';'",
"sentencia_invocacion : '(' lista_parametros ')' ';'",
"sentencia_invocacion : '(' ')' ';'",
"sentencia_invocacion : ID lista_parametros ')' ';'",
"sentencia_invocacion : ID ')' ';'",
"sentencia_invocacion : ID '(' error ')' ';'",
"sentencia_invocacion : ID '(' lista_parametros error ';'",
"sentencia_invocacion : ID '(' error ';'",
"sentencia_invocacion : ID '(' lista_parametros ')'",
"sentencia_invocacion : ID '(' ')'",
"lista_parametros : parametro ',' parametro ',' parametro",
"lista_parametros : parametro ',' parametro",
"lista_parametros : parametro",
"lista_parametros : parametro ',' parametro ',' parametro ',' error",
"lista_parametros : parametro ',' error",
"lista_parametros : parametro parametro parametro",
"lista_parametros : parametro ',' parametro parametro",
"lista_parametros : parametro parametro ',' parametro",
"lista_parametros : parametro parametro",
"parametro : factor",
"condicion : expresion comparador expresion",
"condicion : expresion error expresion",
"condicion : expresion comparador error",
"condicion : error comparador expresion",
"comparador : MAYOR_IGUAL",
"comparador : MENOR_IGUAL",
"comparador : '>'",
"comparador : '<'",
"comparador : IGUAL",
"comparador : DISTINTO",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"expresion : expresion '+' error",
"expresion : expresion '-' error",
"expresion : error '+' termino",
"expresion : error '-' termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"termino : termino '*' error",
"termino : termino '/' error",
"termino : error '*' factor",
"termino : error '/' factor",
"factor : ID",
"factor : cte",
"cte : CTE",
"cte : '-' CTE",
};

//#line 271 "gramatica.y"

private AnalizadorLexico analizadorLexico;
private int nroUltimaLinea;

public Parser(AnalizadorLexico analizadorLexico, boolean debug){
	this.analizadorLexico = analizadorLexico;
	this.yydebug = debug;
}

private void yyerror(String mensaje){
	//System.out.println(Main.ANSI_RED + "ERROR | " + mensaje + Main.ANSI_RESET);
}

private int yylex(){
	if (!analizadorLexico.endOfFile()) {
            int id = analizadorLexico.yylex();
            if (id != -1) // caracter invalido
                return id;
            while (!analizadorLexico.endOfFile()) {
                id = analizadorLexico.yylex();
                if (id != -1)
                    return id;
            }
        }
        return 0;
}


public void checkRango(String cte, boolean negativo){
	Token token = TablaSimbolos.getToken(cte);
	String tipo = token.getTipoToken();

	if (tipo.equals("LONGINT")){
	    long entero = 0;
	    if (negativo) {
		if (Long.parseLong(cte) <= 2147483648L) {
		    entero = Long.parseLong(cte);
		} else {
		    System.out.printf(Main.ANSI_RED + "[AS] | Linea %d: | Entero largo negativo fuera de rango: %s%n" + Main.ANSI_RESET, analizadorLexico.getNroLinea(), cte);
		}
		String nuevoLexema = "-" + entero;
		int cont = Integer.parseInt(TablaSimbolos.getToken(cte).getAtributo("contador")) - 1;
		//if (cont == 0)
		//  TablaSimbolos.remove(cte);
		//else
		  TablaSimbolos.getToken(cte).addAtributo("contador", String.valueOf(cont));
		if (!TablaSimbolos.existe(nuevoLexema)){
		    Token nuevoToken = new Token(token.getIdToken(), "LONGINT", nuevoLexema);
		    nuevoToken.addAtributo("contador", "1");
		    TablaSimbolos.add(nuevoToken);
		}
		else {
                     cont = Integer.parseInt(TablaSimbolos.getToken(nuevoLexema).getAtributo("contador")) + 1 ;
                     TablaSimbolos.getToken(nuevoLexema).addAtributo("contador", String.valueOf(cont));
                }
	    }
	    else{
		if (Long.parseLong(cte) > 2147483647L){
		    System.out.printf(Main.ANSI_RED + "[AS] | Linea %d: | Entero largo positivo fuera de rango: %s%n" + Main.ANSI_RESET, analizadorLexico.getNroLinea(), cte);
		}
	    }
	}
	if (tipo.equals("FLOAT")) {
	    float flotante = 0;
	    if (negativo) {
		if ((1.17549435e-38f < Float.parseFloat(cte) && Float.parseFloat(cte) < 3.40282347e+38f)) {
		    flotante =  Float.parseFloat(cte);
		} else {
		    System.out.printf(Main.ANSI_RED + "[AS] | Linea %d: | Flotante negativo fuera de rango: %s%n" + Main.ANSI_RESET, analizadorLexico.getNroLinea(), cte);
		}
		String nuevoLexema = "-" + flotante;
		int cont = Integer.parseInt(TablaSimbolos.getToken(cte).getAtributo("contador")) - 1;
		//if (cont == 0)
		//  TablaSimbolos.remove(cte);
		//else
		  TablaSimbolos.getToken(cte).addAtributo("contador", String.valueOf(cont));
		if (!TablaSimbolos.existe(nuevoLexema)){
		    Token nuevoToken = new Token(token.getIdToken(), "FLOAT", nuevoLexema);
		    nuevoToken.addAtributo("contador", "1");
		    TablaSimbolos.add(nuevoToken);
		}
		else {
                      cont = Integer.parseInt(TablaSimbolos.getToken(nuevoLexema).getAtributo("contador")) + 1 ;
                      TablaSimbolos.getToken(nuevoLexema).addAtributo("contador", String.valueOf(cont));
                }
	    }
	}
}
//#line 1011 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
          nroUltimaLinea = analizadorLexico.getNroLinea();
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 17:
//#line 59 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Declaración de variables %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 18:
//#line 60 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' " + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 19:
//#line 61 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta lista de variables " + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 22:
//#line 66 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' " + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 25:
//#line 73 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 26:
//#line 74 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 27:
//#line 75 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada PROC en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 28:
//#line 76 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada PROC en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 29:
//#line 77 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta definir el identificador en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 30:
//#line 78 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta definir el identificador en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 31:
//#line 79 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en el identificador en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 32:
//#line 80 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en el identificador en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 33:
//#line 81 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 34:
//#line 82 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 35:
//#line 83 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en la lista de parámetros formales en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 36:
//#line 84 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 37:
//#line 85 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 38:
//#line 86 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada NI en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 39:
//#line 87 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada NI en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 40:
//#line 88 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '=' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 41:
//#line 89 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '=' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 42:
//#line 90 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta constante NI en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 43:
//#line 91 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta constante NI en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 44:
//#line 92 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '{' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 45:
//#line 93 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '{' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 46:
//#line 94 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta bloque de sentencias en declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 47:
//#line 95 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta bloque de sentencias en declaración de procedimiento %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 48:
//#line 98 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Lista de parámetros formales (3) %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 49:
//#line 99 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Lista de parámetros formales (2) %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 50:
//#line 100 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Lista de parámetros formales (1) %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 51:
//#line 101 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' entre los primeros dos parámetros formales %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 52:
//#line 102 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' entre los últimos dos parámetros formales %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 53:
//#line 103 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' entre los parámetros formales %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 54:
//#line 104 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Número de parámetros formales permitidos excedido %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 55:
//#line 105 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Parámetro formal incorrecto %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 56:
//#line 108 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Parámetro formal %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 57:
//#line 109 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Parámetro formal %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 58:
//#line 110 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta definir el tipo del parámetro formal %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 59:
//#line 111 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta definir el tipo del parámetro formal %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 60:
//#line 114 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 61:
//#line 115 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 62:
//#line 116 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 63:
//#line 117 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 64:
//#line 118 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta condición en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 65:
//#line 119 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta condición en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 66:
//#line 120 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en condición en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 67:
//#line 121 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en condición en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 68:
//#line 122 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 69:
//#line 123 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 70:
//#line 124 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada THEN en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 71:
//#line 125 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada THEN en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 72:
//#line 126 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta bloque de sentencias luego de THEN en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 73:
//#line 127 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta bloque de sentencias luego de THEN en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 74:
//#line 128 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en bloque de sentencias luego de THEN en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 75:
//#line 129 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en bloque de sentencias luego de THEN en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 76:
//#line 130 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada END_IF en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 77:
//#line 131 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 78:
//#line 132 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada END_IF y literal ';' en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 79:
//#line 133 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta bloque de sentencias luego de ELSE en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 80:
//#line 134 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en bloque de sentencias luego de ELSE en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 81:
//#line 135 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada END_IF en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 82:
//#line 136 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 83:
//#line 137 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada END_IF y literal ';' en sentencia de selección IF %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 84:
//#line 138 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Faltan bloques de sentencias luego de THEN y ELSE en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 85:
//#line 141 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de control FOR %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 86:
//#line 142 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de control FOR %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 87:
//#line 143 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada FOR en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 88:
//#line 144 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada FOR en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 89:
//#line 145 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 90:
//#line 146 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 91:
//#line 147 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta identificador de control en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 92:
//#line 148 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta identificador de control en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 93:
//#line 149 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '=' para inicializar identificador de control en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 94:
//#line 150 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '=' para inicializar identificador de control en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 95:
//#line 151 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta constante para inicializar identificador de control en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 96:
//#line 152 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta constante para inicializar identificador de control en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 97:
//#line 153 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' luego de expresión de inicialización en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 98:
//#line 154 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' luego de expresión de inicialización en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 99:
//#line 155 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta condición de control en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 100:
//#line 156 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta condición de control en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 101:
//#line 157 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' luego de condición de control en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 102:
//#line 158 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' luego de condición de control en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 103:
//#line 159 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta indicar incremento o decremento de la sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 104:
//#line 160 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta indicar incremento o decremento de la sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 105:
//#line 161 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta indicar constante de paso para incremento/decremento en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 106:
//#line 162 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta indicar constante de paso para incremento/decremento en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 107:
//#line 163 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 108:
//#line 164 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de control %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 109:
//#line 165 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en el cuerpo de la sentencia de control. Se encontró referencia a sentencia declarativa. %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 110:
//#line 166 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en el cuerpo de la sentencia de control. Se encontró referencia a sentencia declarativa. %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 111:
//#line 167 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en el cuerpo de la sentencia de control. Se encontró referencia a sentencia declarativa. %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 112:
//#line 168 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en el cuerpo de la sentencia de control. Se encontró referencia a sentencia declarativa. %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 113:
//#line 169 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en el cuerpo de la sentencia de control. Se encontró referencia a sentencia declarativa. %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 114:
//#line 170 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en el cuerpo de la sentencia de control. Se encontró referencia a sentencia declarativa. %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 115:
//#line 171 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en el cuerpo de la sentencia de control. Se encontró referencia a sentencia declarativa. %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 118:
//#line 179 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de salida OUT %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 119:
//#line 180 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada OUT en sentencia de salida %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 120:
//#line 181 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada OUT en sentencia de salida %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 121:
//#line 182 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de salida %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 122:
//#line 183 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta cadena multilínea a imprimir en sentencia de salida %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 123:
//#line 184 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en la cadena multilínea a imprimir en sentencia de salida %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 124:
//#line 185 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de salida %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 125:
//#line 186 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' en sentencia de salida %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 126:
//#line 189 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de asignación %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 127:
//#line 190 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta lado izquierdo de la asignación %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 128:
//#line 191 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '=' en sentencia de asignación %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 129:
//#line 192 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta lado derecho de la asignación %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 130:
//#line 193 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' al final de la asignación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 131:
//#line 196 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de invocación con lista de parámetros %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 132:
//#line 197 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de invocación sin parámetros %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 133:
//#line 198 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta el identificador del procedimiento a invocar %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 134:
//#line 199 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta el identificador del procedimiento a invocar %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 135:
//#line 200 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de invocación %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 136:
//#line 201 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de invocación %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 137:
//#line 202 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: | Parámetros inválidos %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 138:
//#line 203 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de invocación %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 139:
//#line 204 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: | Falta literal ')' en sentencia de invocación %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 140:
//#line 205 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: | Falta literal ';' en sentencia de invocación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 141:
//#line 206 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: | Falta literal ';' en sentencia de invocación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 142:
//#line 209 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Lista de parámetros (3) %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 143:
//#line 210 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Lista de parámetros (2) %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 144:
//#line 211 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Lista de parámetros (1) %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 145:
//#line 212 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Número de parámetros permitidos excedido %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 146:
//#line 213 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Parámetro incorrecto %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 147:
//#line 214 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Faltan literales ',' entre parámetros %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 148:
//#line 215 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' entre parámetros %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 149:
//#line 216 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' entre parámetros %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 150:
//#line 217 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' entre parámetros %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 152:
//#line 223 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Comparación %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 153:
//#line 224 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta comparador %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 154:
//#line 225 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta el segundo operando de la condición %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 155:
//#line 226 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta el primer operando de la condición %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 158:
//#line 231 "gramatica.y"
{yyval = new ParserVal('>');}
break;
case 159:
//#line 232 "gramatica.y"
{yyval = new ParserVal('<');}
break;
case 162:
//#line 237 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Suma %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 163:
//#line 238 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Resta %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 165:
//#line 240 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: | Falta el segundo operando en la suma %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 166:
//#line 241 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: | Falta el segundo operando en la resta %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 167:
//#line 242 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d:| Falta el primer operando en la suma %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 168:
//#line 243 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: | Falta el primer operando en la resta %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 169:
//#line 246 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Multiplicación %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 170:
//#line 247 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: División %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 172:
//#line 249 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: | Falta el segundo operando en la multiplicación %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 173:
//#line 250 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: | Falta el segundo operando en la división %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 174:
//#line 251 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: | Falta el primer operando en la multiplicación %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 175:
//#line 252 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: | Falta el primer operando en la división %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 178:
//#line 259 "gramatica.y"
{String cte = val_peek(0).sval;
           checkRango(cte, false);
           }
break;
case 179:
//#line 262 "gramatica.y"
{ String cte = val_peek(0).sval;
      		  checkRango(cte, true);
      		  yyval = new ParserVal("-" + cte);
      		  String cte_nueva= "-"+cte;
      		  System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Constante negativa %s %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea(), cte_nueva);
     	 	}
break;
//#line 1759 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
