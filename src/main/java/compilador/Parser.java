//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
package compilador;
//#line 19 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
public static ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short IGUAL=257;
public final static short MAYOR_IGUAL=258;
public final static short MENOR_IGUAL=259;
public final static short DISTINTO=260;
public final static short IF=261;
public final static short THEN=262;
public final static short ELSE=263;
public final static short FOR=264;
public final static short END_IF=265;
public final static short OUT=266;
public final static short FUNC=267;
public final static short RETURN=268;
public final static short LONGINT=269;
public final static short FLOAT=270;
public final static short ID=271;
public final static short CTE=272;
public final static short CADENA_MULT=273;
public final static short PROC=274;
public final static short VAR=275;
public final static short NI=276;
public final static short UP=277;
public final static short DOWN=278;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    2,    2,    4,    4,    1,    1,    5,    5,    6,
    6,    3,    3,    3,    3,    3,    7,    7,    7,   15,
   15,   15,   14,   14,    8,    8,    8,    8,    8,    8,
    8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
    8,    8,    8,    8,    8,    8,    8,   16,   16,   16,
   16,   16,   16,   16,   16,   18,   18,   18,   18,    9,
    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
    9,    9,    9,    9,   10,   10,   10,   10,   10,   10,
   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
   10,   10,   10,   10,   10,   20,   20,   11,   11,   11,
   11,   11,   11,   11,   12,   12,   12,   12,   12,   13,
   13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
   22,   22,   22,   22,   22,   22,   22,   22,   22,   23,
   19,   19,   19,   19,   25,   25,   25,   25,   25,   25,
   21,   21,   21,   21,   21,   21,   21,   26,   26,   26,
   26,   26,   26,   26,   24,   24,   17,   17,
};
final static short yylen[] = {                            2,
    1,    2,    1,    4,    1,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
    1,    2,    1,    1,   11,   10,   10,    9,   10,    9,
   11,   10,   11,   10,   11,   10,   10,   11,   10,   11,
   10,   11,   10,   10,    9,   10,    9,    5,    3,    1,
    4,    4,    2,    7,    3,    2,    3,    2,    3,    8,
   10,    7,    9,    7,    9,    8,   10,    7,    9,    8,
   10,    7,    9,    8,   10,    8,    8,    7,    9,   10,
   10,   10,    9,    8,   14,   12,   13,   11,   14,   12,
   14,   12,   14,   12,   14,   12,   14,   12,   14,   12,
   13,   11,   14,   12,   14,   12,   14,   12,   15,   15,
   14,   15,   16,   16,   12,    1,    1,    5,    5,    5,
    4,    5,    5,    4,    4,    4,    4,    4,    3,    5,
    4,    4,    3,    4,    3,    5,    5,    4,    4,    3,
    5,    3,    1,    7,    3,    3,    4,    4,    2,    1,
    3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
    3,    3,    1,    3,    3,    3,    3,    3,    3,    1,
    3,    3,    3,    3,    1,    1,    1,    2,
};
final static short yydefred[] = {                         0,
    0,    0,    0,    0,   23,   24,    0,    0,    0,    0,
    0,    8,    7,    9,   10,   11,   12,   13,   14,   15,
   16,    0,    0,    0,    0,  175,  177,    0,    0,  176,
    0,    0,  170,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  150,    0,    0,    0,    0,    0,
    0,    6,    0,    0,    0,    0,    0,    0,  159,  155,
  156,  160,  157,  158,    0,    0,    0,    0,    0,    0,
    0,    0,  178,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  135,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  133,    0,
   19,    0,   22,   18,   17,    0,  126,    0,    0,    0,
  173,  174,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  171,  168,  172,  169,    0,
    0,    0,    0,    0,    0,    0,    0,  121,  127,   58,
  138,    0,    0,    0,    0,  131,   56,    0,    0,    0,
    0,    0,  128,  125,  134,  145,    0,    0,  146,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  132,
   20,  119,    0,    0,    0,    5,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  120,  122,  123,  118,  136,
   59,   57,    0,    0,    0,    0,    0,  137,  130,    0,
  147,  148,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   52,   51,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   64,
    0,   68,    0,    0,    0,    0,    0,    0,   72,    0,
    0,    0,    0,   62,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   66,    4,    0,    0,    0,   70,    0,
   74,   84,    0,   76,    0,    0,    0,   77,   60,    0,
    0,    0,    0,    0,    0,    0,  116,  117,    0,    0,
    0,    0,    0,  144,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   65,   69,    0,    0,   73,    0,
   79,    0,    0,   63,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   28,    0,   54,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   47,    0,   45,    0,    0,
    0,    0,    0,    0,   30,    0,    0,   67,   71,   75,
   80,   81,   82,   61,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   27,   32,    0,   34,    0,   37,
    0,   39,   41,   43,   26,   36,    0,    0,    0,   46,
    0,   44,   29,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  102,   31,   33,   35,
   38,   40,   42,   25,    0,   88,    0,   90,    0,   92,
    0,   94,    0,   96,    0,   98,    0,  100,    0,  104,
    0,  106,    0,  108,    0,   86,  115,    0,    0,    3,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  101,    2,   87,   89,   91,   93,
   95,   97,   99,  103,  105,  107,    0,   85,    0,    0,
  111,    0,    0,    0,    0,  110,  112,  109,    0,  114,
  113,    0,
};
final static short yydgoto[] = {                         10,
   11,  489,   12,  185,   13,   14,   15,   16,   17,   18,
   19,   20,   21,   22,   55,   93,   30,   94,   31,  340,
   32,   43,   44,   33,   69,   34,
};
final static short yysindex[] = {                       974,
   -3,  576,  -35,  -22,    0,    0,  716,  -36,  102,    0,
  974,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -179, -207,  278, 1417,    0,    0,  230, -186,    0,
   56, 1389,    0,   85, -138, -172, -128,    4,  278,  228,
   94,  679,  141,   35,    0,  145,   25,   10,  125,  130,
  149,    0,  134,    3,  -43,  158,  572,  114,    0,    0,
    0,    0,    0,    0,  735,  735,   -9,   -9,  278, 1499,
  -53,  -31,    0,  -45,  278,  995,  997, 1030, 1094, 1099,
  166,  180,  -42,  340,  352,   47,  346,  476,  -15, -134,
  -46,  143,  369,  343,   75,    0,  159,  499,  370, 1173,
  132,  127,  150,  258,  167,  178,  417,  187,    0,  414,
    0,  207,    0,    0,    0,  422,    0,   87,   85,   85,
    0,    0,   62,  225,  337,  337, -189,  337,   62,   87,
   85,   87,   85,  572,   62,    0,    0,    0,    0,  216,
  223,  243, -204,  471,  473,  482,  501,    0,    0,    0,
    0,  506,  295,  300,  513,    0,    0,  306,  -75,  542,
  528,  530,    0,    0,    0,    0,  402,   -9,    0,  318,
  549,  319,  555,  -29, -216,  -39,  536,  324,  563,    0,
    0,    0,  337,  974, -101,    0,  176,  337,  314,  260,
  564,  582,  584,  585,   16,    0,    0,    0,    0,    0,
    0,    0,   14,  587,  167,  529,  -59,    0,    0,   -9,
    0,    0,  588,  374,  590,  382,  602,  390,  607,  -23,
  608, -215,   14,  609, 1184,  261,  974,  337,  631,  337,
  636,  266,  135,  432,  641,  -91,  337,  645, 1184, 1184,
 1184, 1184, 1184, 1211,  600,   14,  -59,    0,    0,  628,
   14,  665,   14,  666,   14,  669,   14,   14,   79,   14,
  670,   22,  622,   14,  673,  337,  691,  637,  500,    0,
  502,    0,  337,  707,  337,  710,  514,  509,    0,  712,
  517,  129,  510,    0,  717,  730,  731,  733,  734, 1507,
   50,  974,  671,  751,  544,  683,   14,  686,   14,  696,
   14,  697,  701,  704,  541,  705,   14,   14,   81,  974,
  708, -140,  577,    0,    0,  755,  778,  593,    0,  594,
    0,    0,  786,    0,   45,  797, -222,    0,    0,  802,
 -140, -140, -140, -140, -140, -140,    0,    0, -167,  601,
  552,  974,  612,    0,  974,  740,  974,  749,  974,  753,
  974,  974,  974,  569,  580,  974,  763,  764,  769,  596,
  619,  974,  606,  836,    0,    0,  838,  839,    0,  841,
    0,  848,  139,    0,  638,  640,  650,  652,  654,  655,
  660, -144,  895,    0,  635,    0,  647,  974,  659,  974,
  678,  974,  709,  728,  739,    0,  756,    0,  777,  974,
  974,  974,  789,  815,    0,  831,  896,    0,    0,    0,
    0,    0,    0,    0,  897,  900,  904,  905,  912,  916,
  917,  918,   84, 1014,    0,    0,  842,    0,  879,    0,
  891,    0,    0,    0,    0,    0,  903,  914,  931,    0,
  942,    0,    0, 1033, 1053, 1059, 1081, 1087, 1098, 1111,
 1123, 1141, 1150,  854, 1021,  613,    0,    0,    0,    0,
    0,    0,    0,    0,  613,    0,  613,    0,  613,    0,
  613,    0,  613,    0,  613,    0,  613,    0,  613,    0,
  613,    0,  613,    0,  974,    0,    0,  411, 1154,    0,
 1175, 1186, 1197, 1209, 1210, 1231, 1232, 1243, 1255, 1256,
  953, 1267,  -11,  901,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  147,    0,  -98,  -12,
    0, 1268,  915,  837,  843,    0,    0,    0,  335,    0,
    0,  685,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  963,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   31,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   89,    0,    0,    0,    0,   12,    0,
    0,    0,    0,  156,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   78,    0,    0,  -27,    0,    0,    0,  179,    0,    0,
   90,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   55,  101,
    0,    0,  -38,    0,    0,    0,    0,    0,  -34,  205,
  368,  451,  477,  -26,  -24,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  282,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  -21,
    0,  298,    0,    0,    0,    0,   99,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -19,  -18,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  113,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  991,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  391,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -17,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  415,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   78,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,
};
final static short yygindex[] = {                         0,
 1238, 1152, 1344, 1425,   -5, -346,    0,    0,    0,    0,
    0,    0,    0,  -40,  -25,   46, 1476,  -55, 1332,  173,
 1540,   -8,  591,    2,  932,  687,
};
final static int YYTABLESIZE=1866;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         92,
   51,  222,  154,   48,   36,   52,  152,   92,   45,  127,
   45,  218,  156,   50,  153,  115,  151,   38,  143,   53,
  154,   55,   49,   48,  152,  152,  526,   23,  113,  152,
  163,   95,  153,  372,  151,   29,   23,  259,  160,  219,
  261,   45,  373,  151,   87,   45,  112,  151,   24,  154,
  106,  194,  175,   92,  166,  175,  175,   24,   29,  220,
  262,   92,   92,   92,  104,   56,  188,  195,  121,  122,
  163,  163,  189,  163,  244,  163,   53,  140,  100,   29,
  137,  139,  309,   82,   23,   73,  181,  147,  381,  163,
  163,   54,  163,  107,  166,  166,   74,  166,   83,  166,
  167,   45,   45,  206,   76,   24,   77,  487,  339,  337,
  338,  422,  527,  166,  166,  162,  166,  140,   92,  186,
  186,  153,  186,   29,  454,   29,   79,  423,   67,  143,
  149,   80,   81,   68,    5,    6,  337,  338,  502,  142,
  167,  167,   50,  167,   84,  167,   29,  171,  173,  176,
  248,  249,   96,  141,  519,  163,   76,  525,   77,  167,
  167,  228,  167,  229,  280,   92,   92,  170,   45,   45,
  524,  281,  117,  282,   23,  168,   29,  186,  129,  166,
  205,   99,  186,  186,  102,  108,   23,  329,  109,  110,
  172,  294,  111,    5,    6,   24,  105,  414,  116,   90,
   67,   65,  140,   66,  164,   68,   92,   24,  125,    5,
    6,   45,  114,  142,   21,   90,  128,  163,  129,   46,
   35,  268,  186,  154,  186,  167,  140,  152,  186,  155,
  126,  186,  258,   37,   47,  153,  221,  151,  154,  154,
  141,  150,  152,  152,  164,  164,  217,  164,   50,  164,
  153,  153,  151,  151,   53,  150,   55,   49,   48,   85,
  186,   26,   27,  164,  164,  105,  164,  186,   91,  186,
   71,  243,   29,   54,   29,  186,   86,  308,    5,    6,
  103,  124,  175,  175,   90,   27,  163,  163,  163,  163,
  163,  163,  163,  163,  163,  163,  163,  139,  175,  163,
  163,  163,  146,  129,  163,   26,   27,  163,  163,  370,
  166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
  166,  124,   29,  166,  166,  166,  337,  338,  166,  164,
  161,  166,  166,  140,  304,   52,  359,  139,  140,  453,
  140,  140,  140,  140,  143,  149,  140,  140,  140,   52,
   27,  140,   27,    9,  142,   52,  167,  167,  167,  167,
  167,  167,  167,  167,  167,  167,  167,  161,  141,  167,
  167,  167,   49,   27,  167,  532,    9,  167,  167,   52,
  144,   52,  105,   52,  328,   52,  159,   52,   52,   52,
   78,   52,  145,   52,  413,    5,    6,  275,   52,  276,
   52,   90,   26,   27,  148,  105,  124,  161,  161,  158,
  161,   21,  161,  157,   83,    5,    6,  523,    5,    6,
    8,   52,  139,   52,   90,   52,  161,  161,  165,  161,
   78,   52,   52,   52,  129,   52,  184,  150,  230,  129,
  231,  129,  129,  129,  129,  210,   29,  129,  129,  129,
  165,  504,  129,  177,   83,   29,   45,  178,  179,  184,
  164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
  164,    9,  180,  164,  164,  164,  162,   54,  164,   95,
  182,  164,  164,   89,  363,   70,  183,  191,   92,   45,
  165,  165,  161,  165,  192,  165,    5,    6,   26,   27,
   26,   27,   90,  375,  376,  377,  378,  379,  380,  165,
  165,  382,  165,  174,  193,   78,  162,  162,   76,  162,
   77,  162,  237,  266,  238,  267,    5,    6,  273,  196,
  274,  197,   90,   57,  149,  162,  162,  124,  162,   83,
  198,   76,  124,   77,  124,  124,  124,  124,   26,   27,
  124,  124,  124,  139,  184,  124,    9,  164,  139,  199,
  139,  139,  139,  139,  200,  201,  139,  139,  139,  233,
  202,  139,  247,  203,    2,  165,  234,    3,  235,    4,
    9,  204,    5,    6,    7,  207,  208,    8,  209,  214,
  105,    9,    1,  213,  215,  216,  223,    2,  105,  224,
    3,  162,    4,    5,    6,    5,    6,    7,    9,   90,
    8,    5,    6,   67,   65,   28,   66,   90,   68,    9,
   29,  225,  239,  161,  161,  161,  161,  161,  161,  161,
  161,  161,  161,  161,  101,    9,  161,  161,  161,  184,
  240,  161,  241,  242,  161,  161,   78,  246,  251,  252,
  253,   78,    9,   78,   78,   78,   78,  254,    9,   78,
   78,   78,  255,  354,   78,  256,  503,  257,  260,  264,
   83,  295,   26,   27,    9,   83,  384,   83,   83,   83,
   83,   26,   27,   83,   83,   83,    9,    1,   83,  270,
  167,  169,    2,  396,  272,    3,  277,    4,    9,  279,
    5,    6,    7,  284,  398,    8,  165,  165,  165,  165,
  165,  165,  165,  165,  165,  165,  165,    9,  403,  165,
  165,  165,  292,   29,  165,  297,  299,  165,  165,  301,
  307,  312,  162,  162,  162,  162,  162,  162,  162,  162,
  162,  162,  162,  405,  310,  162,  162,  162,    9,  314,
  162,  119,  120,  162,  162,   40,   41,  211,  212,  425,
   29,  315,  131,  133,  316,  319,  317,    9,  321,  322,
  324,  426,  325,  323,  330,  331,   42,    2,    9,   29,
    3,  326,    4,  428,  105,    5,    6,    7,  332,  333,
    8,  334,  335,  342,  343,    9,    1,    5,    6,  344,
  250,    2,  430,   90,    3,  345,    4,    1,  347,    5,
    6,    7,    2,  365,    8,    3,    9,    4,  349,  351,
    5,    6,    7,  352,    1,    8,  353,  356,    9,    2,
  362,   25,    3,  432,    4,    1,  366,    5,    6,    7,
    2,  364,    8,    3,  369,    4,   26,   27,    5,    6,
    7,    1,  433,    8,    9,  371,    2,  367,  368,    3,
  374,    4,  388,  434,    5,    6,    7,  386,    1,    8,
    9,  390,  383,    2,    1,  392,    3,  407,    4,    2,
  435,    9,    3,  455,    4,  400,  401,    5,    6,    7,
    1,  402,    8,    9,  408,    2,  409,  410,    3,  411,
    4,  436,    1,    5,    6,    7,  412,    2,    8,  415,
    3,  416,    4,  440,    1,    5,    6,    7,    9,    2,
    8,  417,    3,  418,    4,  419,  420,    5,    6,    7,
    9,  421,    8,    1,   97,  424,  444,  445,    2,  442,
  446,    3,    9,    4,  447,  448,    5,    6,    7,   26,
   27,    8,  449,    9,  529,  443,  450,  451,  452,  156,
  155,  530,    1,   78,    1,    0,  458,  531,    0,    2,
    9,   39,    3,    0,    4,    0,  485,    5,    6,    7,
    0,    9,    8,    1,    0,    0,   26,   27,    2,    0,
  118,    3,    9,    4,    1,    0,    5,    6,    7,    2,
    0,    8,    3,  459,    4,   26,   27,    5,    6,    7,
    0,    1,    8,    9,    0,  460,    2,    0,    0,    3,
    0,    4,    0,    0,    5,    6,    7,  461,    0,    8,
    6,    0,    1,    0,    0,    0,    0,    2,  462,   29,
    3,   29,    4,    0,    1,    5,    6,    7,    0,    2,
    8,    0,    3,    9,    4,  463,    0,    5,    6,    7,
  488,   41,    8,    0,    0,   29,  464,    0,    0,    0,
    1,    0,    9,    0,   29,    2,    0,  518,    3,    0,
    4,   42,    0,    5,    6,    7,    1,    0,    8,    0,
    0,    2,    9,    0,    3,    0,    4,    1,    9,    5,
    6,    7,    2,    0,    8,    3,    0,    4,    0,    1,
    5,    6,    7,    0,    2,    8,    0,    3,    0,    4,
    9,    0,    5,    6,    7,    0,    9,    8,    0,    0,
    0,    0,    0,    0,    1,    0,  456,    9,   29,    2,
    0,    0,    3,   29,    4,    0,    1,    5,    6,    7,
    9,    2,    8,    0,    3,  465,    4,    0,    1,    5,
    6,    7,    9,    2,    8,    0,    3,    0,    4,    1,
    0,    5,    6,    7,    2,  467,    8,    3,    0,    4,
    9,  469,    5,    6,    7,    0,    1,    8,    0,    9,
    0,    2,    0,    9,    3,    0,    4,    1,    0,    5,
    6,    7,    2,  471,    8,    3,    0,    4,  517,  473,
    5,    6,    7,    2,    9,    8,    3,   29,    4,    0,
  475,    5,    6,    7,    0,    9,    8,    0,   29,    1,
    0,    0,    0,  477,    2,    0,    9,    3,    0,    4,
    0,    0,    5,    6,    7,  479,    6,    8,    9,    9,
  130,    6,  132,    0,    6,   29,    6,    0,    0,    6,
    6,    6,    0,  481,    6,   26,   27,   26,   27,    1,
    9,    9,  483,    0,    2,    0,   39,    3,  505,    4,
    0,    0,    9,    0,  455,  134,    0,    0,    1,    0,
    0,   26,   27,    2,    9,    9,    3,    0,    4,  507,
   26,   27,    0,  455,    0,    0,    9,    9,    1,    0,
  508,    0,    0,    2,    1,    0,    3,    0,    4,    2,
    0,  509,    3,  455,    4,    0,    0,    0,    0,  455,
    0,    0,    0,  510,  511,    0,    1,    0,    0,    0,
    0,    2,    1,    0,    3,    0,    4,    2,    0,  136,
    3,  455,    4,    1,  138,  512,  513,  455,    2,   72,
    0,    3,    0,    4,   26,   27,    1,  514,  455,   26,
   27,    2,    0,    0,    3,    0,    4,    0,    1,  515,
  516,  455,    0,    2,    0,    0,    3,    0,    4,    0,
    0,  521,  528,  455,    0,    0,    1,    0,    0,    0,
    0,    2,    0,    0,    3,    1,    4,    0,    0,    1,
    2,  455,    0,    3,    2,    4,    0,    3,    0,    4,
  455,  227,    0,    0,  455,    0,    0,    0,  166,    0,
    1,   76,    0,   77,    0,    2,    0,    0,    3,   25,
    4,    1,    0,   26,   27,  455,    2,    0,   64,    3,
   63,    4,    1,    0,   26,   27,  455,    2,   67,   65,
    3,   66,    4,   68,    1,    1,  290,  455,    0,    2,
    2,    0,    3,    3,    4,    4,   64,    0,   63,  455,
  455,   26,   27,    0,    0,    0,    1,    1,    0,    0,
    0,    2,    2,    0,    3,    3,    4,    4,    1,    0,
    0,  455,  455,    2,    0,    0,    3,    0,    4,    0,
    1,    1,    0,  455,    0,    2,    2,    0,    3,    3,
    4,    4,  520,    1,    0,  455,  455,    2,    2,  341,
    3,    3,    4,    4,    0,    0,    0,  455,  455,  124,
   67,   65,  355,   66,    0,   68,    0,  361,   67,   65,
  187,   66,  190,   68,    0,    0,  265,    0,   64,    0,
   63,    0,    0,   58,    0,  336,   64,    0,   63,    0,
  285,  286,  287,  288,  289,  291,    0,    0,   88,  385,
    0,   98,  387,    0,  389,    0,  391,    0,  393,  394,
  395,  397,    0,  399,    0,    0,    0,  404,    0,  406,
    0,    0,    0,    0,    0,    0,    0,  226,  123,    0,
    0,    0,  232,  236,  129,    0,  491,  135,  492,    0,
  493,    0,  494,    0,  495,  427,  496,  429,  497,  431,
  498,    0,  499,    0,  500,    0,  501,  437,  438,  439,
  441,    0,    0,    0,   75,   59,   60,   61,   62,    0,
    0,    0,  269,  522,  271,    0,    0,    0,  278,    0,
    0,  283,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   59,   60,   61,   62,    0,  245,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  313,    0,    0,    0,    0,    0,    0,  318,  263,  320,
    0,    0,    0,    0,    0,  327,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  293,    0,    0,    0,    0,  296,    0,  298,    0,
  300,    0,  302,  303,  305,  306,    0,    0,    0,  311,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   59,   60,   61,   62,    0,
    0,    0,    0,   59,   60,   61,   62,  457,    0,    0,
    0,    0,  346,    0,  348,    0,  350,    0,    0,    0,
    0,    0,  357,  358,  360,    0,    0,  466,  468,  470,
  472,  474,  476,  478,  480,  482,  484,  486,    0,  490,
    0,    0,    0,    0,    0,    0,    0,    0,  490,    0,
  490,    0,  490,    0,  490,    0,  490,    0,  490,    0,
  490,    0,  490,    0,  490,    0,  490,    0,  490,    0,
    0,    0,  506,    0,  506,  506,  506,  506,  506,  506,
  506,  506,  506,  506,  506,  490,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  506,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         40,
    9,   41,   41,   40,   40,   11,   41,   48,    7,   41,
    9,   41,   59,   41,   41,   59,   41,   40,   61,   41,
   59,   41,   41,   41,   59,   41,  125,   40,   54,   41,
    0,   40,   59,  256,   59,   45,   40,   61,   94,  256,
  256,   40,  265,   59,   41,   44,   44,   59,   61,   90,
   41,  256,   41,   94,    0,   44,   45,   61,   45,  276,
  276,  102,  103,  104,   40,  273,  256,  272,   67,   68,
   40,   41,  262,   43,   59,   45,  256,    0,   44,   45,
   79,   80,   61,  256,   40,  272,  112,   41,  256,   59,
   60,  271,   62,   48,   40,   41,   41,   43,  271,   45,
    0,  100,  101,  159,   43,   61,   45,  454,   59,  277,
  278,  256,  125,   59,   60,   41,   62,   40,  159,  125,
  126,  256,  128,   45,   41,   45,   42,  272,   42,   41,
   41,   47,  271,   47,  269,  270,  277,  278,  485,   41,
   40,   41,   41,   43,  273,   45,   45,  102,  103,  104,
  206,  207,   59,   41,  501,  125,   43,  256,   45,   59,
   60,  263,   62,  265,  256,  206,  207,   41,  167,  168,
  517,  263,   59,  265,   40,   44,   45,  183,    0,  125,
  256,   41,  188,  189,   40,   61,   40,   59,   59,   41,
   41,  247,   59,  269,  270,   61,  256,   59,   41,  275,
   42,   43,  125,   45,    0,   47,  247,   61,  262,  269,
  270,  210,  256,  256,   59,  275,  262,   59,   40,  256,
  256,  227,  228,  262,  230,  125,   61,  262,  234,  276,
  262,  237,  256,  256,  271,  262,  276,  262,  277,  278,
   61,  271,  277,  278,   40,   41,  276,   43,  276,   45,
  277,  278,  277,  278,  276,  271,  276,  276,  276,  256,
  266,  271,  272,   59,   60,  256,   62,  273,   41,  275,
   41,  256,   45,  271,   45,  281,  273,  256,  269,  270,
  256,    0,  271,  272,  275,  272,  256,  257,  258,  259,
  260,  261,  262,  263,  264,  265,  266,    0,   41,  269,
  270,  271,  256,  125,  274,  271,  272,  277,  278,  265,
  256,  257,  258,  259,  260,  261,  262,  263,  264,  265,
  266,   40,   45,  269,  270,  271,  277,  278,  274,  125,
  256,  277,  278,  256,  256,  341,  256,   40,  261,  256,
  263,  264,  265,  266,  256,  256,  269,  270,  271,  355,
  272,  274,  272,   40,  256,  361,  256,  257,  258,  259,
  260,  261,  262,  263,  264,  265,  266,    0,  256,  269,
  270,  271,  271,  272,  274,   41,   40,  277,  278,  385,
   41,  387,  256,  389,  256,  391,   44,  393,  394,  395,
    0,  397,   41,  399,  256,  269,  270,  263,  404,  265,
  406,  275,  271,  272,   59,  256,  125,   40,   41,   41,
   43,  256,   45,  271,    0,  269,  270,  271,  269,  270,
  274,  427,  125,  429,  275,  431,   59,   60,   59,   62,
   40,  437,  438,  439,  256,  441,  123,  271,  263,  261,
  265,  263,  264,  265,  266,   44,   45,  269,  270,  271,
    0,   41,  274,  276,   40,   45,  455,   41,  272,  123,
  256,  257,  258,  259,  260,  261,  262,  263,  264,  265,
  266,   40,   59,  269,  270,  271,    0,  271,  274,  488,
   59,  277,  278,  256,  312,  256,  262,  272,  529,  488,
   40,   41,  125,   43,  272,   45,  269,  270,  271,  272,
  271,  272,  275,  331,  332,  333,  334,  335,  336,   59,
   60,  339,   62,  256,  272,  125,   40,   41,   43,   43,
   45,   45,  263,  263,  265,  265,  269,  270,  263,   59,
  265,   59,  275,  256,   59,   59,   60,  256,   62,  125,
   59,   43,  261,   45,  263,  264,  265,  266,  271,  272,
  269,  270,  271,  256,  123,  274,   40,   59,  261,   59,
  263,  264,  265,  266,   59,  271,  269,  270,  271,  256,
  271,  274,   44,   61,  261,  125,  263,  264,  265,  266,
   40,  276,  269,  270,  271,   44,   59,  274,   59,   41,
  256,   40,  256,  276,  276,   41,   61,  261,  256,  276,
  264,  125,  266,  269,  270,  269,  270,  271,   40,  275,
  274,  269,  270,   42,   43,   40,   45,  275,   47,   40,
   45,   59,   59,  256,  257,  258,  259,  260,  261,  262,
  263,  264,  265,  266,   44,   40,  269,  270,  271,  123,
   59,  274,   59,   59,  277,  278,  256,   61,   61,  276,
   61,  261,   40,  263,  264,  265,  266,  276,   40,  269,
  270,  271,   61,  123,  274,  276,  256,   61,   61,   61,
  256,   44,  271,  272,   40,  261,  125,  263,  264,  265,
  266,  271,  272,  269,  270,  271,   40,  256,  274,   59,
  100,  101,  261,  125,   59,  264,  265,  266,   40,   59,
  269,  270,  271,   59,  125,  274,  256,  257,  258,  259,
  260,  261,  262,  263,  264,  265,  266,   40,  123,  269,
  270,  271,  123,   45,  274,   61,   61,  277,  278,   61,
   61,   59,  256,  257,  258,  259,  260,  261,  262,  263,
  264,  265,  266,  125,  123,  269,  270,  271,   40,   59,
  274,   65,   66,  277,  278,   40,   41,  167,  168,  125,
   45,  125,   76,   77,  265,   59,  265,   40,   59,  256,
   59,  125,  256,  265,  265,   59,   61,  261,   40,   45,
  264,  265,  266,  125,  256,  269,  270,  271,   59,   59,
  274,   59,   59,  123,   44,   40,  256,  269,  270,  256,
  210,  261,  125,  275,  264,  123,  266,  256,  123,  269,
  270,  271,  261,   59,  274,  264,   40,  266,  123,  123,
  269,  270,  271,  123,  256,  274,  123,  123,   40,  261,
  123,  256,  264,  125,  266,  256,   59,  269,  270,  271,
  261,  265,  274,  264,   59,  266,  271,  272,  269,  270,
  271,  256,  125,  274,   40,   59,  261,  265,  265,  264,
   59,  266,  123,  125,  269,  270,  271,  256,  256,  274,
   40,  123,  272,  261,  256,  123,  264,  272,  266,  261,
  125,   40,  264,  271,  266,  123,  123,  269,  270,  271,
  256,  123,  274,   40,   59,  261,   59,   59,  264,   59,
  266,  125,  256,  269,  270,  271,   59,  261,  274,  272,
  264,  272,  266,  125,  256,  269,  270,  271,   40,  261,
  274,  272,  264,  272,  266,  272,  272,  269,  270,  271,
   40,  272,  274,  256,  256,   41,   41,   41,  261,  125,
   41,  264,   40,  266,   41,   41,  269,  270,  271,  271,
  272,  274,   41,   40,   40,  125,   41,   41,   41,   59,
  276,  125,    0,   32,  256,   -1,  125,  125,   -1,  261,
   40,  256,  264,   -1,  266,   -1,  123,  269,  270,  271,
   -1,   40,  274,  256,   -1,   -1,  271,  272,  261,   -1,
  256,  264,   40,  266,  256,   -1,  269,  270,  271,  261,
   -1,  274,  264,  125,  266,  271,  272,  269,  270,  271,
   -1,  256,  274,   40,   -1,  125,  261,   -1,   -1,  264,
   -1,  266,   -1,   -1,  269,  270,  271,  125,   -1,  274,
   40,   -1,  256,   -1,   -1,   -1,   -1,  261,  125,   45,
  264,   45,  266,   -1,  256,  269,  270,  271,   -1,  261,
  274,   -1,  264,   40,  266,  125,   -1,  269,  270,  271,
   40,   41,  274,   -1,   -1,   45,  125,   -1,   -1,   -1,
  256,   -1,   40,   -1,   45,  261,   -1,  125,  264,   -1,
  266,   61,   -1,  269,  270,  271,  256,   -1,  274,   -1,
   -1,  261,   40,   -1,  264,   -1,  266,  256,   40,  269,
  270,  271,  261,   -1,  274,  264,   -1,  266,   -1,  256,
  269,  270,  271,   -1,  261,  274,   -1,  264,   -1,  266,
   40,   -1,  269,  270,  271,   -1,   40,  274,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,  123,   40,   45,  261,
   -1,   -1,  264,   45,  266,   -1,  256,  269,  270,  271,
   40,  261,  274,   -1,  264,  123,  266,   -1,  256,  269,
  270,  271,   40,  261,  274,   -1,  264,   -1,  266,  256,
   -1,  269,  270,  271,  261,  123,  274,  264,   -1,  266,
   40,  123,  269,  270,  271,   -1,  256,  274,   -1,   40,
   -1,  261,   -1,   40,  264,   -1,  266,  256,   -1,  269,
  270,  271,  261,  123,  274,  264,   -1,  266,  256,  123,
  269,  270,  271,  261,   40,  274,  264,   45,  266,   -1,
  123,  269,  270,  271,   -1,   40,  274,   -1,   45,  256,
   -1,   -1,   -1,  123,  261,   -1,   40,  264,   -1,  266,
   -1,   -1,  269,  270,  271,  123,  256,  274,   40,   40,
  256,  261,  256,   -1,  264,   45,  266,   -1,   -1,  269,
  270,  271,   -1,  123,  274,  271,  272,  271,  272,  256,
   40,   40,  123,   -1,  261,   -1,  256,  264,  125,  266,
   -1,   -1,   40,   -1,  271,  256,   -1,   -1,  256,   -1,
   -1,  271,  272,  261,   40,   40,  264,   -1,  266,  125,
  271,  272,   -1,  271,   -1,   -1,   40,   40,  256,   -1,
  125,   -1,   -1,  261,  256,   -1,  264,   -1,  266,  261,
   -1,  125,  264,  271,  266,   -1,   -1,   -1,   -1,  271,
   -1,   -1,   -1,  125,  125,   -1,  256,   -1,   -1,   -1,
   -1,  261,  256,   -1,  264,   -1,  266,  261,   -1,  256,
  264,  271,  266,  256,  256,  125,  125,  271,  261,   28,
   -1,  264,   -1,  266,  271,  272,  256,  125,  271,  271,
  272,  261,   -1,   -1,  264,   -1,  266,   -1,  256,  125,
  125,  271,   -1,  261,   -1,   -1,  264,   -1,  266,   -1,
   -1,  125,  125,  271,   -1,   -1,  256,   -1,   -1,   -1,
   -1,  261,   -1,   -1,  264,  256,  266,   -1,   -1,  256,
  261,  271,   -1,  264,  261,  266,   -1,  264,   -1,  266,
  271,  184,   -1,   -1,  271,   -1,   -1,   -1,  256,   -1,
  256,   43,   -1,   45,   -1,  261,   -1,   -1,  264,  256,
  266,  256,   -1,  271,  272,  271,  261,   -1,   60,  264,
   62,  266,  256,   -1,  271,  272,  271,  261,   42,   43,
  264,   45,  266,   47,  256,  256,  256,  271,   -1,  261,
  261,   -1,  264,  264,  266,  266,   60,   -1,   62,  271,
  271,  271,  272,   -1,   -1,   -1,  256,  256,   -1,   -1,
   -1,  261,  261,   -1,  264,  264,  266,  266,  256,   -1,
   -1,  271,  271,  261,   -1,   -1,  264,   -1,  266,   -1,
  256,  256,   -1,  271,   -1,  261,  261,   -1,  264,  264,
  266,  266,  256,  256,   -1,  271,  271,  261,  261,  292,
  264,  264,  266,  266,   -1,   -1,   -1,  271,  271,   41,
   42,   43,  305,   45,   -1,   47,   -1,  310,   42,   43,
  126,   45,  128,   47,   -1,   -1,  225,   -1,   60,   -1,
   62,   -1,   -1,   24,   -1,   59,   60,   -1,   62,   -1,
  239,  240,  241,  242,  243,  244,   -1,   -1,   39,  342,
   -1,   42,  345,   -1,  347,   -1,  349,   -1,  351,  352,
  353,  354,   -1,  356,   -1,   -1,   -1,  360,   -1,  362,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  183,   69,   -1,
   -1,   -1,  188,  189,   75,   -1,  465,   78,  467,   -1,
  469,   -1,  471,   -1,  473,  388,  475,  390,  477,  392,
  479,   -1,  481,   -1,  483,   -1,  485,  400,  401,  402,
  403,   -1,   -1,   -1,  256,  257,  258,  259,  260,   -1,
   -1,   -1,  228,  502,  230,   -1,   -1,   -1,  234,   -1,
   -1,  237,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,   -1,  203,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  266,   -1,   -1,   -1,   -1,   -1,   -1,  273,  223,  275,
   -1,   -1,   -1,   -1,   -1,  281,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  246,   -1,   -1,   -1,   -1,  251,   -1,  253,   -1,
  255,   -1,  257,  258,  259,  260,   -1,   -1,   -1,  264,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,  424,   -1,   -1,
   -1,   -1,  297,   -1,  299,   -1,  301,   -1,   -1,   -1,
   -1,   -1,  307,  308,  309,   -1,   -1,  444,  445,  446,
  447,  448,  449,  450,  451,  452,  453,  454,   -1,  456,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  465,   -1,
  467,   -1,  469,   -1,  471,   -1,  473,   -1,  475,   -1,
  477,   -1,  479,   -1,  481,   -1,  483,   -1,  485,   -1,
   -1,   -1,  489,   -1,  491,  492,  493,  494,  495,  496,
  497,  498,  499,  500,  501,  502,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  522,
};
}
final static short YYFINAL=10;
final static short YYMAXTOKEN=278;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,null,"';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"IGUAL","MAYOR_IGUAL","MENOR_IGUAL",
"DISTINTO","IF","THEN","ELSE","FOR","END_IF","OUT","FUNC","RETURN","LONGINT",
"FLOAT","ID","CTE","CADENA_MULT","PROC","VAR","NI","UP","DOWN",
};
final static String yyrule[] = {
"$accept : programa",
"programa : lista_sentencias",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable",
"bloque_ejecutable : sentencia_ejecutable",
"bloque_sentencias : '{' lista_sentencias sentencia '}'",
"bloque_sentencias : sentencia",
"lista_sentencias : lista_sentencias sentencia",
"lista_sentencias : sentencia",
"sentencia : sentencia_ejecutable",
"sentencia : sentencia_declarativa",
"sentencia_declarativa : declaracion_variables",
"sentencia_declarativa : declaracion_procedimiento",
"sentencia_ejecutable : sentencia_seleccion",
"sentencia_ejecutable : sentencia_control",
"sentencia_ejecutable : sentencia_salida",
"sentencia_ejecutable : sentencia_asignacion",
"sentencia_ejecutable : sentencia_invocacion",
"declaracion_variables : tipo lista_variables ';'",
"declaracion_variables : tipo lista_variables error",
"declaracion_variables : tipo error ';'",
"lista_variables : ID ',' lista_variables",
"lista_variables : ID",
"lista_variables : ID lista_variables",
"tipo : LONGINT",
"tipo : FLOAT",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales ')' NI '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' ')' NI '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : ID '(' lista_parametros_formales ')' NI '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : ID '(' ')' NI '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC '(' lista_parametros_formales ')' NI '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC '(' ')' NI '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC error '(' lista_parametros_formales ')' NI '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC error '(' ')' NI '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID error lista_parametros_formales ')' NI '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID error ')' NI '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' error ')' NI '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales NI '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' error NI '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales ')' error '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' ')' error '=' cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales ')' NI error cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' ')' NI error cte '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales ')' NI '=' error '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' ')' NI '=' error '{' lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales ')' NI '=' cte lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' ')' NI '=' cte lista_sentencias '}'",
"declaracion_procedimiento : PROC ID '(' lista_parametros_formales ')' NI '=' cte '{' '}'",
"declaracion_procedimiento : PROC ID '(' ')' NI '=' cte '{' '}'",
"lista_parametros_formales : parametro_formal ',' parametro_formal ',' parametro_formal",
"lista_parametros_formales : parametro_formal ',' parametro_formal",
"lista_parametros_formales : parametro_formal",
"lista_parametros_formales : parametro_formal parametro_formal ',' parametro_formal",
"lista_parametros_formales : parametro_formal ',' parametro_formal parametro_formal",
"lista_parametros_formales : parametro_formal parametro_formal",
"lista_parametros_formales : parametro_formal ',' parametro_formal ',' parametro_formal ',' error",
"lista_parametros_formales : parametro_formal ',' error",
"parametro_formal : tipo ID",
"parametro_formal : VAR tipo ID",
"parametro_formal : error ID",
"parametro_formal : VAR error ID",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias ELSE bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF condicion ')' THEN bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF condicion ')' THEN bloque_sentencias ELSE bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' ')' THEN bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' ')' THEN bloque_sentencias ELSE bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' error ')' THEN bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' error ')' THEN bloque_sentencias ELSE bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' condicion THEN bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' condicion THEN bloque_sentencias ELSE bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' error bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' error bloque_sentencias ELSE bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN ELSE bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN error END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN error ELSE bloque_sentencias END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias error ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias END_IF error",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias error",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias ELSE END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias ELSE error END_IF ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias ELSE bloque_sentencias error ';'",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias ELSE bloque_sentencias END_IF error",
"sentencia_seleccion : IF '(' condicion ')' THEN bloque_sentencias ELSE bloque_sentencias error",
"sentencia_seleccion : IF '(' condicion ')' THEN ELSE END_IF error",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' sentencia_ejecutable",
"sentencia_control : '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' sentencia_ejecutable",
"sentencia_control : FOR error ID '=' CTE ';' condicion ';' incr_decr CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR error ID '=' CTE ';' condicion ';' incr_decr CTE ')' sentencia_ejecutable",
"sentencia_control : FOR '(' error '=' CTE ';' condicion ';' incr_decr CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' error '=' CTE ';' condicion ';' incr_decr CTE ')' sentencia_ejecutable",
"sentencia_control : FOR '(' ID error CTE ';' condicion ';' incr_decr CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID error CTE ';' condicion ';' incr_decr CTE ')' sentencia_ejecutable",
"sentencia_control : FOR '(' ID '=' error ';' condicion ';' incr_decr CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID '=' error ';' condicion ';' incr_decr CTE ')' sentencia_ejecutable",
"sentencia_control : FOR '(' ID '=' CTE error condicion ';' incr_decr CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID '=' CTE error condicion ';' incr_decr CTE ')' sentencia_ejecutable",
"sentencia_control : FOR '(' ID '=' CTE ';' error ';' incr_decr CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' error ';' incr_decr CTE ')' sentencia_ejecutable",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion incr_decr CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion incr_decr CTE ')' sentencia_ejecutable",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' error CTE ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' error CTE ')' sentencia_ejecutable",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr error ')' '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr error ')' sentencia_ejecutable",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE error '{' bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE error sentencia_ejecutable",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' '{' sentencia_declarativa bloque_ejecutable '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' '{' bloque_ejecutable sentencia_declarativa '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' '{' sentencia_declarativa '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' '{' sentencia_declarativa error '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' '{' bloque_ejecutable sentencia_declarativa error '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' '{' bloque_ejecutable error sentencia_declarativa '}'",
"sentencia_control : FOR '(' ID '=' CTE ';' condicion ';' incr_decr CTE ')' sentencia_declarativa",
"incr_decr : UP",
"incr_decr : DOWN",
"sentencia_salida : OUT '(' CADENA_MULT ')' ';'",
"sentencia_salida : error '(' CADENA_MULT ')' ';'",
"sentencia_salida : OUT error CADENA_MULT ')' ';'",
"sentencia_salida : OUT '(' ')' ';'",
"sentencia_salida : OUT '(' error ')' ';'",
"sentencia_salida : OUT '(' CADENA_MULT error ';'",
"sentencia_salida : OUT '(' CADENA_MULT ')'",
"sentencia_asignacion : ID '=' expresion ';'",
"sentencia_asignacion : error '=' expresion ';'",
"sentencia_asignacion : ID error expresion ';'",
"sentencia_asignacion : ID '=' error ';'",
"sentencia_asignacion : ID '=' expresion",
"sentencia_invocacion : ID '(' lista_parametros ')' ';'",
"sentencia_invocacion : ID '(' ')' ';'",
"sentencia_invocacion : '(' lista_parametros ')' ';'",
"sentencia_invocacion : '(' ')' ';'",
"sentencia_invocacion : ID lista_parametros ')' ';'",
"sentencia_invocacion : ID ')' ';'",
"sentencia_invocacion : ID '(' error ')' ';'",
"sentencia_invocacion : ID '(' lista_parametros error ';'",
"sentencia_invocacion : ID '(' error ';'",
"sentencia_invocacion : ID '(' lista_parametros ')'",
"sentencia_invocacion : ID '(' ')'",
"lista_parametros : parametro ',' parametro ',' parametro",
"lista_parametros : parametro ',' parametro",
"lista_parametros : parametro",
"lista_parametros : parametro ',' parametro ',' parametro ',' error",
"lista_parametros : parametro ',' error",
"lista_parametros : parametro parametro parametro",
"lista_parametros : parametro ',' parametro parametro",
"lista_parametros : parametro parametro ',' parametro",
"lista_parametros : parametro parametro",
"parametro : factor",
"condicion : expresion comparador expresion",
"condicion : expresion error expresion",
"condicion : expresion comparador error",
"condicion : error comparador expresion",
"comparador : MAYOR_IGUAL",
"comparador : MENOR_IGUAL",
"comparador : '>'",
"comparador : '<'",
"comparador : IGUAL",
"comparador : DISTINTO",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"expresion : expresion '+' error",
"expresion : expresion '-' error",
"expresion : error '+' termino",
"expresion : error '-' termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"termino : termino '*' error",
"termino : termino '/' error",
"termino : error '*' factor",
"termino : error '/' factor",
"factor : ID",
"factor : cte",
"cte : CTE",
"cte : '-' CTE",
};

//#line 270 "gramatica.y"

private AnalizadorLexico analizadorLexico;
private int nroUltimaLinea;

public Parser(AnalizadorLexico analizadorLexico, boolean debug){
	this.analizadorLexico = analizadorLexico;
	this.yydebug = debug;
}

private void yyerror(String mensaje){
	//System.out.println(Main.ANSI_RED + "ERROR | " + mensaje + Main.ANSI_RESET);
}

private int yylex(){
	return analizadorLexico.yylex();
}


public void checkRango(String cte, boolean negativo){
	Token token = TablaSimbolos.getToken(cte);
	String tipo = token.getTipoToken();

	if (tipo.equals("LONGINT")){
	    long entero = 0;
	    if (negativo) {
		if (Long.parseLong(cte) <= 2147483648L) {
		    entero = Long.parseLong(cte);
		} else {
		    System.out.printf(Main.ANSI_RED + "[Linea %d]- ERROR | Entero largo negativo fuera de rango: %s%n" + Main.ANSI_RESET, nroUltimaLinea, cte);
		}
		String nuevoLexema = "-" + entero;
		int cont = Integer.parseInt(TablaSimbolos.getToken(cte).getAtributo("contador")) - 1;
		//if (cont == 0)
		//  TablaSimbolos.remove(cte);
		//else
		  TablaSimbolos.getToken(cte).addAtributo("contador", String.valueOf(cont));
		if (!TablaSimbolos.existe(nuevoLexema)){
		    Token nuevoToken = new Token(token.getIdToken(), "LONGINT", nuevoLexema);
		    nuevoToken.addAtributo("contador", "1");
		    TablaSimbolos.add(nuevoToken);
		}
		else {
                     cont = Integer.parseInt(TablaSimbolos.getToken(nuevoLexema).getAtributo("contador")) + 1 ;
                     TablaSimbolos.getToken(nuevoLexema).addAtributo("contador", String.valueOf(cont));
                }
	    }
	    else{
		if (Long.parseLong(cte) > 2147483647L){
		    System.out.printf(Main.ANSI_RED + "[Linea %d]- ERROR | Entero largo positivo fuera de rango: %s%n" + Main.ANSI_RESET, nroUltimaLinea, cte);
		}
	    }
	}
	if (tipo.equals("FLOAT")) {
	    float flotante = 0;
	    if (negativo) {
		if ((1.17549435e-38f < Float.parseFloat(cte) && Float.parseFloat(cte) < 3.40282347e+38f)) {
		    flotante =  Float.parseFloat(cte);
		} else {
		    System.out.printf(Main.ANSI_RED + "[Linea %d]- ERROR | Flotante negativo fuera de rango: %s%n" + Main.ANSI_RESET, nroUltimaLinea, cte);
		}
		String nuevoLexema = "-" + flotante;
		int cont = Integer.parseInt(TablaSimbolos.getToken(cte).getAtributo("contador")) - 1;
		//if (cont == 0)
		//  TablaSimbolos.remove(cte);
		//else
		  TablaSimbolos.getToken(cte).addAtributo("contador", String.valueOf(cont));
		if (!TablaSimbolos.existe(nuevoLexema)){
		    Token nuevoToken = new Token(token.getIdToken(), "FLOAT", nuevoLexema);
		    nuevoToken.addAtributo("contador", "1");
		    TablaSimbolos.add(nuevoToken);
		}
		else {
                      cont = Integer.parseInt(TablaSimbolos.getToken(nuevoLexema).getAtributo("contador")) + 1 ;
                      TablaSimbolos.getToken(nuevoLexema).addAtributo("contador", String.valueOf(cont));
                }
	    }
	}
}
//#line 1000 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        nroUltimaLinea = analizadorLexico.getNroLinea();
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 17:
//#line 59 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Declaración de variables %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 18:
//#line 60 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' " + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 19:
//#line 61 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta lista de variables " + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 22:
//#line 66 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' " + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 25:
//#line 73 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 26:
//#line 74 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 27:
//#line 75 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada PROC en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 28:
//#line 76 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada PROC en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 29:
//#line 77 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta definir el identificador en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 30:
//#line 78 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta definir el identificador en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 31:
//#line 79 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en el identificador en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 32:
//#line 80 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en el identificador en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 33:
//#line 81 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 34:
//#line 82 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 35:
//#line 83 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en la lista de parámetros formales en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 36:
//#line 84 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 37:
//#line 85 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 38:
//#line 86 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada NI en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 39:
//#line 87 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada NI en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 40:
//#line 88 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '=' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 41:
//#line 89 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '=' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 42:
//#line 90 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta constante NI en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 43:
//#line 91 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta constante NI en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 44:
//#line 92 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '{' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 45:
//#line 93 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '{' en sentencia de declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 46:
//#line 94 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta bloque de sentencias en declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 47:
//#line 95 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta bloque de sentencias en declaración de procedimiento %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 48:
//#line 98 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Lista de parámetros formales (3) %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 49:
//#line 99 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Lista de parámetros formales (2) %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 50:
//#line 100 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Lista de parámetros formales (1) %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 51:
//#line 101 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' entre los primeros dos parámetros formales %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 52:
//#line 102 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' entre los últimos dos parámetros formales %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 53:
//#line 103 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' entre los parámetros formales %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 54:
//#line 104 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Número de parámetros formales permitidos excedido %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 55:
//#line 105 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Parámetro formal incorrecto %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 56:
//#line 108 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Parámetro formal %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 57:
//#line 109 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Parámetro formal %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 58:
//#line 110 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta definir el tipo del parámetro formal %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 59:
//#line 111 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta definir el tipo del parámetro formal %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 60:
//#line 114 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 61:
//#line 115 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 62:
//#line 116 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 63:
//#line 117 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 64:
//#line 118 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta condición en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 65:
//#line 119 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta condición en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 66:
//#line 120 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en condición en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 67:
//#line 121 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en condición en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 68:
//#line 122 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 69:
//#line 123 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 70:
//#line 124 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada THEN en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 71:
//#line 125 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada THEN en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 72:
//#line 126 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta bloque de sentencias luego de THEN en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 73:
//#line 127 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta bloque de sentencias luego de THEN en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 74:
//#line 128 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en bloque de sentencias luego de THEN en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 75:
//#line 129 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en bloque de sentencias luego de THEN en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 76:
//#line 130 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada END_IF en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 77:
//#line 131 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 78:
//#line 132 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada END_IF y literal ';' en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 79:
//#line 133 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta bloque de sentencias luego de ELSE en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 80:
//#line 134 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en bloque de sentencias luego de ELSE en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 81:
//#line 135 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada END_IF en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 82:
//#line 136 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 83:
//#line 137 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada END_IF y literal ';' en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 84:
//#line 138 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Faltan bloques de sentencias luego de THEN y ELSE en sentencia de selección IF %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 85:
//#line 141 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de control FOR %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 86:
//#line 142 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de control FOR %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 87:
//#line 143 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada FOR en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 88:
//#line 144 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada FOR en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 89:
//#line 145 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 90:
//#line 146 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 91:
//#line 147 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta identificador de control en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 92:
//#line 148 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta identificador de control en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 93:
//#line 149 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '=' para inicializar identificador de control en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 94:
//#line 150 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '=' para inicializar identificador de control en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 95:
//#line 151 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta constante para inicializar identificador de control en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 96:
//#line 152 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta constante para inicializar identificador de control en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 97:
//#line 153 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' luego de expresión de inicialización en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 98:
//#line 154 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' luego de expresión de inicialización en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 99:
//#line 155 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta condición de control en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 100:
//#line 156 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta condición de control en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 101:
//#line 157 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' luego de condición de control en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 102:
//#line 158 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' luego de condición de control en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 103:
//#line 159 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta indicar incremento o decremento de la sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 104:
//#line 160 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta indicar incremento o decremento de la sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 105:
//#line 161 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta indicar constante de paso para incremento/decremento en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 106:
//#line 162 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta indicar constante de paso para incremento/decremento en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 107:
//#line 163 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 108:
//#line 164 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de control %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 109:
//#line 165 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en el cuerpo de la sentencia de control. Se encontró referencia a sentencia declarativa. %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 110:
//#line 166 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en el cuerpo de la sentencia de control. Se encontró referencia a sentencia declarativa. %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 111:
//#line 167 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en el cuerpo de la sentencia de control. Se encontró referencia a sentencia declarativa. %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 112:
//#line 168 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en el cuerpo de la sentencia de control. Se encontró referencia a sentencia declarativa. %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 113:
//#line 169 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en el cuerpo de la sentencia de control. Se encontró referencia a sentencia declarativa. %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 114:
//#line 170 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en el cuerpo de la sentencia de control. Se encontró referencia a sentencia declarativa. %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 115:
//#line 171 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en el cuerpo de la sentencia de control. Se encontró referencia a sentencia declarativa. %n" + Main.ANSI_RESET, analizadorLexico.getNroLinea());}
break;
case 118:
//#line 179 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de salida OUT %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 119:
//#line 180 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta palabra reservada OUT en sentencia de salida %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 120:
//#line 181 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de salida %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 121:
//#line 182 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta cadena multilínea a imprimir en sentencia de salida %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 122:
//#line 183 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Error en la cadena multilínea a imprimir en sentencia de salida %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 123:
//#line 184 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de salida %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 124:
//#line 185 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' en sentencia de salida %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 125:
//#line 188 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de asignación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 126:
//#line 189 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta lado izquierdo de la asignación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 127:
//#line 190 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '=' en sentencia de asignación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 128:
//#line 191 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta lado derecho de la asignación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 129:
//#line 192 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ';' al final de la asignación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 130:
//#line 195 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de invocación con lista de parámetros %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 131:
//#line 196 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Sentencia de invocación sin parámetros %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 132:
//#line 197 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta el identificador del procedimiento a invocar %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 133:
//#line 198 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta el identificador del procedimiento a invocar %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 134:
//#line 199 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de invocación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 135:
//#line 200 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal '(' en sentencia de invocación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 136:
//#line 201 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[Linea %d]- ERROR | Parámetros inválidos %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 137:
//#line 202 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ')' en sentencia de invocación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 138:
//#line 203 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[Linea %d]- ERROR | Falta literal ')' en sentencia de invocación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 139:
//#line 204 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[Linea %d]- ERROR | Falta literal ';' en sentencia de invocación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 140:
//#line 205 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[Linea %d]- ERROR | Falta literal ';' en sentencia de invocación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 141:
//#line 208 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Lista de parámetros (3) %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 142:
//#line 209 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Lista de parámetros (2) %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 143:
//#line 210 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Lista de parámetros (1) %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 144:
//#line 211 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Número de parámetros permitidos excedido %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 145:
//#line 212 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Parámetro incorrecto %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 146:
//#line 213 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Faltan literales ',' entre parámetros %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 147:
//#line 214 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' entre parámetros %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 148:
//#line 215 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' entre parámetros %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 149:
//#line 216 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta literal ',' entre parámetros %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 151:
//#line 222 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Comparación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 152:
//#line 223 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta comparador %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 153:
//#line 224 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta el segundo operando de la condición %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 154:
//#line 225 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[AS] | Linea %d: Falta el primer operando de la condición %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 157:
//#line 230 "gramatica.y"
{yyval = new ParserVal('>');}
break;
case 158:
//#line 231 "gramatica.y"
{yyval = new ParserVal('<');}
break;
case 161:
//#line 236 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Suma %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 162:
//#line 237 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Resta %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 164:
//#line 239 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[Linea %d]- ERROR | Falta el segundo operando en la suma %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 165:
//#line 240 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[Linea %d]- ERROR | Falta el segundo operando en la resta %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 166:
//#line 241 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[Linea %d]- ERROR | Falta el primer operando en la suma %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 167:
//#line 242 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[Linea %d]- ERROR | Falta el primer operando en la resta %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 168:
//#line 245 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Multiplicación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 169:
//#line 246 "gramatica.y"
{System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: División %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 171:
//#line 248 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[Linea %d]- ERROR | Falta el segundo operando en la multiplicación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 172:
//#line 249 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[Linea %d]- ERROR | Falta el segundo operando en la división %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 173:
//#line 250 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[Linea %d]- ERROR | Falta el primer operando en la multiplicación %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 174:
//#line 251 "gramatica.y"
{System.out.printf( Main.ANSI_RED + "[Linea %d]- ERROR | Falta el primer operando en la división %n" + Main.ANSI_RESET, nroUltimaLinea);}
break;
case 177:
//#line 258 "gramatica.y"
{String cte = val_peek(0).sval;
           checkRango(cte, false);
           }
break;
case 178:
//#line 261 "gramatica.y"
{ String cte = val_peek(0).sval;
      		  checkRango(cte, true);
      		  yyval = new ParserVal("-" + cte);
      		  String cte_nueva= "-"+cte;
      		  System.out.printf( Main.ANSI_GREEN + "[AS] | Linea %d: Constante negativa %s %n" + Main.ANSI_RESET, nroUltimaLinea, cte_nueva);
     	 	}
break;
//#line 1744 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
